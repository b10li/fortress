import util.utilEud;

function getVxy(unitEpd)
{
	const vx = dwread_epd(unitEpd + 0xF8/4);
	const vy = dwread_epd(unitEpd + 0xFC/4);
	//union 부분, rally & psi field
	return vx, vy;
}

function setVxy(unitEpd, vx, vy)
{
	dwwrite_epd(unitEpd + 0xF8/4, vx);
	dwwrite_epd(unitEpd + 0xFC/4, vy);
}

function gravityPhysics(unitEpd)
{
	
}

function renderUnit(unitEpd)
{// move unit
	const vx, vy = getVxy(unitEpd);
	if(vx != 0 || vy != 0)
	{
		const unitX, unitY = utilEud.getUnitXY(unitEpd);
		const unitPos = (unitX + vx) + (unitY + vy)*65536;
		utilEud.moveLocationXY($L('locPre'), unitX, unitY);
		utilEud.moveLocationXY($L('locDst'), unitX + vx, unitY + vy);
		MoveUnit(1, utilEud.getUnitType(unitEpd), utilEud.getPlayerID(unitEpd), $L('locPre')+1, $L('locDst')+1);
	}
}
/*
		dwwrite_epd(unitEpd + 0x10/4, unitPos); // 0x010 BW::target moveTarget
		dwwrite_epd(unitEpd + 0x18/4, unitPos); // 0x018 BW::position nextMovmentWaypoint
		// halt == x(or y)*256
		dwwrite_epd(unitEpd + 0x2C/4, unitX + vx* 256); // 0x02C haltX
		dwwrite_epd(unitEpd + 0x30/4, unitY + vy* 256); // 0x030 haltY
*/
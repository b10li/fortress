import util.utilEud;


const gravity = 1;
const pTargetArray = EUDArray(10);
var epdnum = 0;
//epd가 저장된 배열을 돌며 0 이 아닌걸 물리적용함
function push(unitEpd)
{
	pTargetArray[epdnum] = unitEpd;
	epdnum = epdnum + 1;
}
function popmid(unitEpd)
{
	for(var i=0; i<10; i++)
	{
		if(pTargetArray[i] == unitEpd)
		{
			pTargetArray[i] = 0;
			epdnum = epdnum - 1;
		}
	}
}

function getVxy(unitEpd)
{
	const vx = dwread_epd(unitEpd + 0xF8/4);
	const vy = dwread_epd(unitEpd + 0xFC/4);
	//union 부분, rally & psi field
	return vx, vy;
}

function setVxy(unitEpd, vx, vy)
{
	dwwrite_epd(unitEpd + 0xF8/4, vx);
	dwwrite_epd(unitEpd + 0xFC/4, vy);
}

function renderUnit(unitEpd)
{// move unit
	const vx, vy = getVxy(unitEpd);
	if(vx != 0 || vy != 0)
	{
		const unitX, unitY = utilEud.getUnitXY(unitEpd);
		const unitPos = (unitX + vx) + (unitY + vy)*65536;
		utilEud.moveLocationXY($L('locPre'), unitX, unitY);
		utilEud.moveLocationXY($L('locDst'), unitX + vx, unitY + vy);
		MoveUnit(1, utilEud.getUnitType(unitEpd), utilEud.getPlayerID(unitEpd), $L('locPre')+1, $L('locDst')+1);
	}
}

function renderBullet()
{
    for(var i=0; i<10; i++)
    {
        if(pTargetArray[i])
        {
        	const unitEpd = pTargetArray[i];
            renderUnit(unitEpd);
            MoveLocation($L('locBullet')+1, 47, $P7, $L('locDst')+1);
            //collision
            if(Bring($P8, AtLeast, 1, $U('Flag'), $L('locBullet')+1))
            {
                popmid(unitEpd);
                RemoveUnitAt(1, '(men)',  $L('locBullet')+1, $P7);
                //boom()
            }
            else
            {
                const vx, vy = getVxy(unitEpd);
                setVxy(unitEpd, vx, vy + gravity);
            }
        }
    }
}
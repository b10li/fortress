## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import header;
import header
# (Line 2) var ctime;
ctime = EUDVariable()
# (Line 4) function PlayAll(num)
# (Line 5) {
@EUDFunc
def PlayAll(num):
    # (Line 6) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 7) if(num == 0) PlayWAV('sound\\Bullet\\TTaFir00.wav');// tank fire
    if EUDIf()(num == 0):
        DoActions(PlayWAV('sound\\Bullet\\TTaFir00.wav'))
        # (Line 8) else if(num == 1) PlayWAV('sound\\Bullet\\tvuFir00.wav');//vulture fire
    if EUDElseIf()(num == 1):
        DoActions(PlayWAV('sound\\Bullet\\tvuFir00.wav'))
        # (Line 9) else if(num == 2) PlayWAV('sound\\Bullet\\HKMISSLE.wav');// missil fire
    if EUDElseIf()(num == 2):
        DoActions(PlayWAV('sound\\Bullet\\HKMISSLE.wav'))
        # (Line 10) else if(num == 3) PlayWAV('sound\\Bullet\\TGoFi200.wav');// eneregy ball fire
    if EUDElseIf()(num == 3):
        DoActions(PlayWAV('sound\\Bullet\\TGoFi200.wav'))
        # (Line 11) else if(num == 4) PlayWAV('sound\\Bullet\\TTaFi200.wav');// tank sidge fire
    if EUDElseIf()(num == 4):
        DoActions(PlayWAV('sound\\Bullet\\TTaFi200.wav'))
        # (Line 12) else if(num == 5) PlayWAV('sound\\glue\\mousedown2.wav');// turn notice
    if EUDElseIf()(num == 5):
        DoActions(PlayWAV('sound\\glue\\mousedown2.wav'))
        # (Line 13) else if(num == 6) PlayWAV('sound\\glue\\scorefillend.wav'); // count down
    if EUDElseIf()(num == 6):
        DoActions(PlayWAV('sound\\glue\\scorefillend.wav'))
        # (Line 14) else if(num == 7) PlayWAV('sound\\Misc\\PError.WAV'); // count down
    if EUDElseIf()(num == 7):
        DoActions(PlayWAV('sound\\Misc\\PError.WAV'))
        # (Line 16) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 17) }
    # (Line 19) function shootEffectMusic(bulletType)

# (Line 20) {
@EUDFunc
def f_shootEffectMusic(bulletType):
    # (Line 21) if(bulletType == header.List[0*3+1]) {PlayAll(3); return ;}//corsair
    if EUDIf()(bulletType == header.List[0 * 3 + 1]):
        PlayAll(3)
        EUDReturn()
        # (Line 22) if(bulletType == header.List[0*3+2]) {PlayAll(3); return ;}//scout
    EUDEndIf()
    if EUDIf()(bulletType == header.List[0 * 3 + 2]):
        PlayAll(3)
        EUDReturn()
        # (Line 24) if(bulletType == header.List[1*3+1]) {PlayAll(6); return ;}//shuttle
    EUDEndIf()
    if EUDIf()(bulletType == header.List[1 * 3 + 1]):
        PlayAll(6)
        EUDReturn()
        # (Line 25) if(bulletType == header.List[1*3+2]) {PlayAll(3); return ;}//arbiter
    EUDEndIf()
    if EUDIf()(bulletType == header.List[1 * 3 + 2]):
        PlayAll(3)
        EUDReturn()
        # (Line 27) if(bulletType == header.List[2*3+1]) {PlayAll(0); return ;}//rhyno
    EUDEndIf()
    if EUDIf()(bulletType == header.List[2 * 3 + 1]):
        PlayAll(0)
        EUDReturn()
        # (Line 28) if(bulletType == header.List[2*3+2]) {PlayAll(0); return ;}//kakaru
    EUDEndIf()
    if EUDIf()(bulletType == header.List[2 * 3 + 2]):
        PlayAll(0)
        EUDReturn()
        # (Line 30) if(bulletType == header.List[3*3+1]) {PlayAll(6); return ;}//carrier
    EUDEndIf()
    if EUDIf()(bulletType == header.List[3 * 3 + 1]):
        PlayAll(6)
        EUDReturn()
        # (Line 31) if(bulletType == header.List[3*3+2]) {PlayAll(3); return ;}//mojo
    EUDEndIf()
    if EUDIf()(bulletType == header.List[3 * 3 + 2]):
        PlayAll(3)
        EUDReturn()
        # (Line 33) if(bulletType == header.List[4*3+1]) {PlayAll(0); return ;}//mutal
    EUDEndIf()
    if EUDIf()(bulletType == header.List[4 * 3 + 1]):
        PlayAll(0)
        EUDReturn()
        # (Line 34) if(bulletType == header.List[4*3+2]) {PlayAll(0); return ;}//guard
    EUDEndIf()
    if EUDIf()(bulletType == header.List[4 * 3 + 2]):
        PlayAll(0)
        EUDReturn()
        # (Line 36) if(bulletType == header.List[5*3+1]) {PlayAll(4); return ;}//wraith
    EUDEndIf()
    if EUDIf()(bulletType == header.List[5 * 3 + 1]):
        PlayAll(4)
        EUDReturn()
        # (Line 37) if(bulletType == header.List[5*3+2]) {PlayAll(0); return ;}//battle
    EUDEndIf()
    if EUDIf()(bulletType == header.List[5 * 3 + 2]):
        PlayAll(0)
        EUDReturn()
        # (Line 39) if(bulletType == header.List[6*3+1]) {PlayAll(2); return ;}//SV
    EUDEndIf()
    if EUDIf()(bulletType == header.List[6 * 3 + 1]):
        PlayAll(2)
        EUDReturn()
        # (Line 40) if(bulletType == header.List[6*3+2]) {PlayAll(2); return ;}//battle H
    EUDEndIf()
    if EUDIf()(bulletType == header.List[6 * 3 + 2]):
        PlayAll(2)
        EUDReturn()
        # (Line 42) if(bulletType == header.List[7*3+1]) {PlayAll(1); return ;}//drop
    EUDEndIf()
    if EUDIf()(bulletType == header.List[7 * 3 + 1]):
        PlayAll(1)
        EUDReturn()
        # (Line 43) if(bulletType == header.List[7*3+2]) {PlayAll(1); return ;}//mine H wraith
    EUDEndIf()
    if EUDIf()(bulletType == header.List[7 * 3 + 2]):
        PlayAll(1)
        EUDReturn()
        # (Line 45) if(bulletType == header.List[8*3+1]) {PlayAll(0); return ;}//queen
    EUDEndIf()
    if EUDIf()(bulletType == header.List[8 * 3 + 1]):
        PlayAll(0)
        EUDReturn()
        # (Line 46) if(bulletType == header.List[8*3+2]) {PlayAll(0); return ;}//scourge spine
    EUDEndIf()
    if EUDIf()(bulletType == header.List[8 * 3 + 2]):
        PlayAll(0)
        EUDReturn()
        # (Line 48) if(bulletType == header.List[9*3+1]) {PlayAll(0); return ;}//over H
    EUDEndIf()
    if EUDIf()(bulletType == header.List[9 * 3 + 1]):
        PlayAll(0)
        EUDReturn()
        # (Line 49) if(bulletType == header.List[9*3+2]) {PlayAll(0); return ;}//over
    EUDEndIf()
    if EUDIf()(bulletType == header.List[9 * 3 + 2]):
        PlayAll(0)
        EUDReturn()
        # (Line 51) }
    EUDEndIf()
    # (Line 53) function getCountdown()

# (Line 54) {
@EUDFunc
def f_getCountdown():
    # (Line 55) for(var i=0; i<11; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 11, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 56) if(CountdownTimer(Exactly, i)) return i;
        if EUDIf()(CountdownTimer(Exactly, i)):
            EUDReturn(i)
            # (Line 57) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 59) function timeAlert()

# (Line 60) {
@EUDFunc
def f_timeAlert():
    # (Line 61) if(CountdownTimer(AtMost, 10))
    if EUDIf()(CountdownTimer(AtMost, 10)):
        # (Line 62) {
        # (Line 63) const time = getCountdown();
        time = f_getCountdown()
        # (Line 64) if(time != ctime)
        if EUDIf()(time == ctime, neg=True):
            # (Line 65) {
            # (Line 66) ctime = time;
            ctime << (time)
            # (Line 67) PlayAll(7);
            PlayAll(7)
            # (Line 68) }
            # (Line 69) }
        EUDEndIf()
        # (Line 70) }
    EUDEndIf()

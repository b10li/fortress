## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 2) const keydeath = 0;
keydeath = _CGFW(lambda: [0], 1)[0]
# (Line 4) const bulletQ = 33;
bulletQ = _CGFW(lambda: [33], 1)[0]
# (Line 6) const tankType = 215;
tankType = _CGFW(lambda: [215], 1)[0]
# (Line 8) const Flag = 215;
Flag = _CGFW(lambda: [215], 1)[0]
# (Line 9) const shootNum = 23;
shootNum = _CGFW(lambda: [23], 1)[0]
# (Line 10) const maxbuildtime = 100;
maxbuildtime = _CGFW(lambda: [100], 1)[0]
# (Line 12) const tankDr = 66;
tankDr = _CGFW(lambda: [66], 1)[0]
# (Line 13) const tankRe = 83;
tankRe = _CGFW(lambda: [83], 1)[0]
# (Line 14) const tankUr = 96;
tankUr = _CGFW(lambda: [96], 1)[0]
# (Line 15) const tankDA = 63;
tankDA = _CGFW(lambda: [63], 1)[0]
# (Line 16) const tankDe = 46;
tankDe = _CGFW(lambda: [46], 1)[0]
# (Line 17) const tankST = 5;
tankST = _CGFW(lambda: [5], 1)[0]
# (Line 18) const tankGo = 3;
tankGo = _CGFW(lambda: [3], 1)[0]
# (Line 19) const tankVu = 2;
tankVu = _CGFW(lambda: [2], 1)[0]
# (Line 20) const tankLu = 103;
tankLu = _CGFW(lambda: [103], 1)[0]
# (Line 21) const tankUl = 39;
tankUl = _CGFW(lambda: [39], 1)[0]
# (Line 23) const ListNum = 10;
ListNum = _CGFW(lambda: [10], 1)[0]
# (Line 24) const List = [
# (Line 26) tankDr,	60,	70, //0 1 2
# (Line 27) tankRe,	69, 71,
# (Line 28) tankUr,	95,	94,
# (Line 29) tankDA,	72,	80,
# (Line 30) tankDe,	43,	44,
# (Line 31) tankST,	8, 	12,
# (Line 32) tankGo,	9,	28,
# (Line 33) tankVu,	11,	21,
# (Line 34) tankLu,	45,	47,
# (Line 35) tankUl,	57, 42	 //27 28 29
# (Line 36) ];
List = _CGFW(lambda: [_ARR(FlattenList([tankDr, 60, 70, tankRe, 69, 71, tankUr, 95, 94, tankDA, 72, 80, tankDe, 43, 44, tankST, 8, 12, tankGo, 9, 28, tankVu, 11, 21, tankLu, 45, 47, tankUl, 57, 42]))], 1)[0]

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 14) import header;
import header
# (Line 15) import physics;
import physics
# (Line 16) import eudEdit;
import eudEdit
# (Line 17) import tank.tankMain;
from tank import tankMain
# (Line 18) import tank.tankAim;
from tank import tankAim
# (Line 19) import tank.tankBullet;
from tank import tankBullet
# (Line 20) import util.utilEud;
from util import utilEud
# (Line 21) import sound.emplayer;
from sound import emplayer
# (Line 22) import customText3 as ct;
import customText3 as ct
# (Line 25) const RELEASE = 1;
RELEASE = _CGFW(lambda: [1], 1)[0]
# (Line 26) const turnArray = [0,1,2, 3,4,5,7];
turnArray = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 4, 5, 7]))], 1)[0]
# (Line 27) var turnPointer = 6;
turnPointer = EUDCreateVariables(1)
_IGVA([turnPointer], lambda: [6])
# (Line 28) var gameState = 0;
gameState = EUDCreateVariables(1)
_IGVA([gameState], lambda: [0])
# (Line 29) var preTurn = 7;
preTurn = EUDCreateVariables(1)
_IGVA([preTurn], lambda: [7])
# (Line 30) var wind = 0;
wind = EUDCreateVariables(1)
_IGVA([wind], lambda: [0])
# (Line 31) function onPluginStart()
# (Line 32) {
@EUDFunc
def onPluginStart():
    # (Line 33) eudEdit.memoryEdit();
    eudEdit.f_memoryEdit()
    # (Line 34) randomize();
    f_randomize()
    # (Line 35) }
    # (Line 36) function displayWind(windVal);

# (Line 37) function gameInfo(targetPlayer);
# (Line 38) function getPlayerText(turnPlayer);
# (Line 39) function getRandomTurn();
# (Line 40) function playerDeath();
# (Line 41) function teamVictory();
# (Line 42) function indiVictory();
# (Line 43) function beforeTriggerExec()
# (Line 44) {
@EUDFunc
def beforeTriggerExec():
    # (Line 45) const turnPlayer = turnArray[turnPointer];
    turnPlayer = turnArray[turnPointer]
    # (Line 46) if(gameState == 0)
    if EUDIf()(gameState == 0):
        # (Line 47) {//start select
        # (Line 48) SetCountdownTimer(SetTo, 40);
        DoActions(SetCountdownTimer(SetTo, 40))
        # (Line 49) gameState = 11;
        gameState << (11)
        # (Line 50) }
        # (Line 51) if(gameState == 11)
    EUDEndIf()
    if EUDIf()(gameState == 11):
        # (Line 52) {
        # (Line 53) if(CountdownTimer(Exactly, 0))
        if EUDIf()(CountdownTimer(Exactly, 0)):
            # (Line 54) tankMain.randomSelect();
            tankMain.f_randomSelect()
            # (Line 55) if(tankMain.selectTank())
        EUDEndIf()
        if EUDIf()(tankMain.f_selectTank()):
            # (Line 56) {
            # (Line 57) gameState = 1;
            gameState << (1)
            # (Line 58) }
            # (Line 59) }
        EUDEndIf()
        # (Line 60) if(gameState == 1)
    EUDEndIf()
    if EUDIf()(gameState == 1):
        # (Line 61) {
        # (Line 62) if(getRandomTurn());
        if EUDIf()(f_getRandomTurn()):
            # (Line 63) gameState = 10;
            pass
        EUDEndIf()
        gameState << (10)
        # (Line 64) }
        # (Line 65) if(gameState == 10)
    EUDEndIf()
    if EUDIf()(gameState == 10):
        # (Line 66) {
        # (Line 67) if(!RELEASE)
        if EUDIf()(RELEASE, neg=True):
            # (Line 68) {//create dummy
            # (Line 69) for(var i=1; i<6; i++)
            i = EUDVariable()
            i << (1)
            if EUDWhile()(i >= 6, neg=True):
                def _t10():
                    i.__iadd__(1)
                # (Line 70) CreateUnit(1, 15, tankMain.locList[i]+1, $P8);
                DoActions(CreateUnit(1, 15, tankMain.locList[i] + 1, 7))
                # (Line 71) }
                EUDSetContinuePoint()
                _t10()
            EUDEndWhile()
            # (Line 72) gameState = 2;
        EUDEndIf()
        gameState << (2)
        # (Line 73) }
        # (Line 74) if(gameState == 2)
    EUDEndIf()
    if EUDIf()(gameState == 2):
        # (Line 75) {//control
        # (Line 77) if(CountdownTimer(Exactly, 0))
        if EUDIf()(CountdownTimer(Exactly, 0)):
            # (Line 78) {//pre control
            # (Line 79) if(preTurn == turnPlayer && RELEASE)
            if EUDIf()(EUDSCAnd()(preTurn == turnPlayer)(RELEASE)()):
                # (Line 80) {// time end
                # (Line 82) SetDeaths(turnPlayer, SetTo, 0, 217);
                DoActions(SetDeaths(turnPlayer, SetTo, 0, 217))
                # (Line 83) SetResources(turnPlayer, SetTo, 0, Gas);
                DoActions(SetResources(turnPlayer, SetTo, 0, Gas))
                # (Line 84) SetDeaths(turnPlayer, SetTo, 0, header.shootNum);
                DoActions(SetDeaths(turnPlayer, SetTo, 0, header.shootNum))
                # (Line 85) tankMain.toggleDisable(turnPlayer, 0);
                tankMain.f_toggleDisable(turnPlayer, 0)
                # (Line 87) gameState = 4;
                gameState << (4)
                # (Line 88) return;
                EUDReturn()
                # (Line 89) }
                # (Line 90) if(turnPlayer !=7 && playerexist(turnPlayer))
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(turnPlayer == 7, neg=True)(f_playerexist(turnPlayer))()):
                # (Line 91) {
                # (Line 93) SetSwitch(preTurn, Clear);
                DoActions(SetSwitch(preTurn, Clear))
                # (Line 94) SetDeaths(preTurn, SetTo, 0, 217);
                DoActions(SetDeaths(preTurn, SetTo, 0, 217))
                # (Line 95) SetDeaths(preTurn, SetTo, 0, header.shootNum);
                DoActions(SetDeaths(preTurn, SetTo, 0, header.shootNum))
                # (Line 97) wind = (rand()%44)/4;
                wind << ((f_rand() % 44) // 4)
                # (Line 99) RemoveUnitAt(All, '(men)', $L('PlayArea')+1, $P7);
                DoActions(RemoveUnitAt(All, '(men)', GetLocationIndex('PlayArea') + 1, 6))
                # (Line 100) SetCountdownTimer(SetTo, 40);
                DoActions(SetCountdownTimer(SetTo, 40))
                # (Line 101) tankMain.toggleDisable(turnPlayer, 1);
                tankMain.f_toggleDisable(turnPlayer, 1)
                # (Line 103) MoveLocation($L('loc1')+1, '(men)', turnPlayer, $L('PlayArea')+1);
                DoActions(MoveLocation(GetLocationIndex('loc1') + 1, '(men)', turnPlayer, GetLocationIndex('PlayArea') + 1))
                # (Line 104) utilEud.CenterViewAll($L('loc1'));
                utilEud.CenterViewAll(GetLocationIndex('loc1'))
                # (Line 105) }
                # (Line 106) else
                # (Line 107) {// dead or none player
            if EUDElse()():
                # (Line 108) turnArray[turnPointer] = 7;
                _ARRW(turnArray, turnPointer) << (7)
                # (Line 110) gameState = 4;
                gameState << (4)
                # (Line 111) }
                # (Line 113) }
            EUDEndIf()
            # (Line 114) if(CountdownTimer(AtLeast, 1))
        EUDEndIf()
        if EUDIf()(CountdownTimer(AtLeast, 1)):
            # (Line 115) {//start control
            # (Line 116) preTurn = turnPlayer;
            preTurn << (turnPlayer)
            # (Line 118) emplayer.timeAlert();
            emplayer.f_timeAlert()
            # (Line 119) const chatPtr = dwread_epd(EPD(0x640B58));
            chatPtr = f_dwread_epd(EPD(0x640B58))
            # (Line 120) displayWind(wind);
            f_displayWind(wind)
            # (Line 121) getPlayerText(turnPlayer);
            f_getPlayerText(turnPlayer)
            # (Line 122) ct.printP(ct.cp, "\x13\x01차례");
            ct.f_printP(ct.cp, "\x13\x01차례")
            # (Line 123) gameInfo(turnPlayer);
            f_gameInfo(turnPlayer)
            # (Line 124) const check = tankMain.controlTank(turnPlayer);
            check = tankMain.f_controlTank(turnPlayer)
            # (Line 125) if (check)
            if EUDIf()(check):
                # (Line 126) {//goto shoot state
                # (Line 127) gameState = 3;
                gameState << (3)
                # (Line 128) SetCountdownTimer(SetTo, 0);
                DoActions(SetCountdownTimer(SetTo, 0))
                # (Line 130) SetDeaths(turnPlayer, SetTo, 1, header.shootNum);
                DoActions(SetDeaths(turnPlayer, SetTo, 1, header.shootNum))
                # (Line 132) tankMain.toggleDisable(turnPlayer, 0);
                tankMain.f_toggleDisable(turnPlayer, 0)
                # (Line 133) }
                # (Line 135) dwwrite_epd(EPD(0x640B58), chatPtr);
            EUDEndIf()
            f_dwwrite_epd(EPD(0x640B58), chatPtr)
            # (Line 136) }
            # (Line 137) }
        EUDEndIf()
        # (Line 138) if(gameState == 3)
    EUDEndIf()
    if EUDIf()(gameState == 3):
        # (Line 139) {// shoot
        # (Line 140) const shootChance = utilEud.getDeath(turnPlayer, header.shootNum);
        shootChance = utilEud.f_getDeath(turnPlayer, header.shootNum)
        # (Line 141) if(shootChance > 0 && CountdownTimer(Exactly, 0))
        if EUDIf()(EUDSCAnd()(shootChance <= 0, neg=True)(CountdownTimer(Exactly, 0))()):
            # (Line 142) {
            # (Line 143) SetCountdownTimer(SetTo, 9);
            DoActions(SetCountdownTimer(SetTo, 9))
            # (Line 144) tankMain.shootMissile(turnPlayer);
            tankMain.f_shootMissile(turnPlayer)
            # (Line 145) SetDeaths(turnPlayer, Subtract, 1, header.shootNum);
            DoActions(SetDeaths(turnPlayer, Subtract, 1, header.shootNum))
            # (Line 146) }
            # (Line 147) else if(shootChance == 0 &&  CountdownTimer(Exactly, 0))
        if EUDElseIf()(EUDSCAnd()(shootChance == 0)(CountdownTimer(Exactly, 0))()):
            # (Line 148) {// end shooting
            # (Line 149) gameState = 4;
            gameState << (4)
            # (Line 150) }
            # (Line 152) }
        EUDEndIf()
        # (Line 153) if(gameState == 4)
    EUDEndIf()
    if EUDIf()(gameState == 4):
        # (Line 154) {// next
        # (Line 155) for(var i=0; i<6; i++){
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t22():
                i.__iadd__(1)
            # (Line 156) tankAim.clearAngle(i);
            tankAim.f_clearAngle(i)
            # (Line 157) }
            # (Line 158) turnPointer = (turnPointer+1)%6;
            EUDSetContinuePoint()
            _t22()
        EUDEndWhile()
        turnPointer << ((turnPointer + 1) % 6)
        # (Line 159) gameState = 2;
        gameState << (2)
        # (Line 160) }
        # (Line 161) if(gameState >= 2)
    EUDEndIf()
    if EUDIf()(gameState >= 2):
        # (Line 162) {
        # (Line 163) playerDeath();
        f_playerDeath()
        # (Line 165) if(RELEASE) indiVictory();
        if EUDIf()(RELEASE):
            f_indiVictory()
            # (Line 166) }
        EUDEndIf()
        # (Line 167) EUDPlayerLoop()();
    EUDEndIf()
    EUDPlayerLoop()()
    # (Line 168) if(getcurpl() != $P8)
    if EUDIf()(f_getcurpl() == 7, neg=True):
        # (Line 169) SetAllianceStatus($Force1, Ally);
        DoActions(SetAllianceStatus(18, Ally))
        # (Line 170) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 172) tankMain.renderTank();
    tankMain.f_renderTank()
    # (Line 173) tankBullet.renderBullet(wind);
    tankBullet.f_renderBullet(wind)
    # (Line 175) }
    # (Line 177) function indiVictory()

# (Line 178) {
@EUDFunc
def f_indiVictory():
    # (Line 179) if(Command($Force1, Exactly, 1, '(men)'))
    if EUDIf()(Command(18, Exactly, 1, '(men)')):
        # (Line 180) {
        # (Line 181) EUDPlayerLoop()();
        EUDPlayerLoop()()
        # (Line 182) Victory();
        DoActions(Victory())
        # (Line 183) EUDEndPlayerLoop();
        EUDEndPlayerLoop()
        # (Line 184) }
        # (Line 185) }
    EUDEndIf()
    # (Line 186) function teamVictory()

# (Line 187) {
@EUDFunc
def f_teamVictory():
    # (Line 188) if(Command($Force1, Exactly, 0, '(men)') || Command($Force3, Exactly, 0, '(men)'))
    if EUDIf()(EUDSCOr()(Command(18, Exactly, 0, '(men)'))(Command(20, Exactly, 0, '(men)'))()):
        # (Line 189) {
        # (Line 190) EUDPlayerLoop()();
        EUDPlayerLoop()()
        # (Line 191) Victory();
        DoActions(Victory())
        # (Line 192) EUDEndPlayerLoop();
        EUDEndPlayerLoop()
        # (Line 193) }
        # (Line 194) }
    EUDEndIf()
    # (Line 196) function playerDeath()

# (Line 197) {
@EUDFunc
def f_playerDeath():
    # (Line 198) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 199) {
        # (Line 200) if(turnArray[i] != 7)
        if EUDIf()(turnArray[i] == 7, neg=True):
            # (Line 201) {
            # (Line 202) if(Bring(turnArray[i], Exactly, 0, '(men)', $L('PlayArea')+1))
            if EUDIf()(Bring(turnArray[i], Exactly, 0, '(men)', GetLocationIndex('PlayArea') + 1)):
                # (Line 203) {
                # (Line 204) if(tankMain.checkDeath(turnArray[i]))
                if EUDIf()(tankMain.f_checkDeath(turnArray[i])):
                    # (Line 205) {
                    # (Line 206) const chatPtr = dwread_epd(EPD(0x640B58));
                    chatPtr = f_dwread_epd(EPD(0x640B58))
                    # (Line 207) ct.printP(ct.cp, "\x13\x01사망");
                    ct.f_printP(ct.cp, "\x13\x01사망")
                    # (Line 208) getPlayerText(turnArray[i]);
                    f_getPlayerText(turnArray[i])
                    # (Line 209) dwwrite_epd(EPD(0x640B58), chatPtr);
                    f_dwwrite_epd(EPD(0x640B58), chatPtr)
                    # (Line 211) tankMain.removeTank(turnArray[i]);
                    tankMain.f_removeTank(turnArray[i])
                    # (Line 212) turnArray[i] = 7;
                    _ARRW(turnArray, i) << (7)
                    # (Line 213) }
                    # (Line 214) }
                EUDEndIf()
                # (Line 215) }
            EUDEndIf()
            # (Line 216) }
        EUDEndIf()
        # (Line 217) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 219) function getRandomTurn()

# (Line 220) {
@EUDFunc
def f_getRandomTurn():
    # (Line 221) for(var i = 0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 222) {
        # (Line 223) const rn = rand()%6;
        rn = f_rand() % 6
        # (Line 224) if(rn == i)
        if EUDIf()(rn == i):
            # (Line 225) {
            # (Line 226) continue;
            EUDContinue()
            # (Line 227) }
            # (Line 228) else
            # (Line 229) {//swap
        if EUDElse()():
            # (Line 230) const temp = turnArray[i];
            temp = turnArray[i]
            # (Line 231) turnArray[i] = turnArray[rn];
            _ARRW(turnArray, i) << (turnArray[rn])
            # (Line 232) turnArray[rn] = temp;
            _ARRW(turnArray, rn) << (temp)
            # (Line 233) }
            # (Line 234) }
        EUDEndIf()
        # (Line 235) for(var j=0; j<6; j++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    j = EUDVariable()
    j << (0)
    if EUDWhile()(j >= 6, neg=True):
        def _t5():
            j.__iadd__(1)
        # (Line 236) {
        # (Line 238) if(Deaths(turnArray[j], Exactly, 0, header.tankType))
        if EUDIf()(Deaths(turnArray[j], Exactly, 0, header.tankType)):
            # (Line 239) {
            # (Line 240) turnArray[j] = 7;
            _ARRW(turnArray, j) << (7)
            # (Line 241) }
            # (Line 242) }
        EUDEndIf()
        # (Line 243) return 1;
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    EUDReturn(1)
    # (Line 244) }
    # (Line 246) function gameInfo(targetPlayer)

# (Line 247) {
@EUDFunc
def f_gameInfo(targetPlayer):
    # (Line 248) ct.printP(targetPlayer, "\x07[조작법]");
    ct.f_printP(targetPlayer, "\x07[조작법]")
    # (Line 249) ct.printP(targetPlayer, "\x07[I],[K]: \x01각도");
    ct.f_printP(targetPlayer, "\x07[I],[K]: \x01각도")
    # (Line 250) ct.printP(targetPlayer, "\x07[J]: \x01발사파워 (꾹 누름)");
    ct.f_printP(targetPlayer, "\x07[J]: \x01발사파워 (꾹 누름)")
    # (Line 251) ct.printP(targetPlayer, "\x07[L]: \x01무기교체 ");
    ct.f_printP(targetPlayer, "\x07[L]: \x01무기교체 ")
    # (Line 252) ct.printP(targetPlayer, "\x01이동: \x01그냥 우클릭 무브해");
    ct.f_printP(targetPlayer, "\x01이동: \x01그냥 우클릭 무브해")
    # (Line 254) }
    # (Line 255) function getPlayerText(turnPlayer)

# (Line 256) {
@EUDFunc
def f_getPlayerText(turnPlayer):
    # (Line 259) if(turnPlayer == 0) ct.printP(ct.cp, "\x13\x06빨강\x01");
    if EUDIf()(turnPlayer == 0):
        ct.f_printP(ct.cp, "\x13\x06빨강\x01")
        # (Line 260) else if(turnPlayer == 1) ct.printP(ct.cp, "\x13\x0e파랑\x01");
    if EUDElseIf()(turnPlayer == 1):
        ct.f_printP(ct.cp, "\x13\x0e파랑\x01")
        # (Line 261) else if(turnPlayer == 2) ct.printP(ct.cp, "\x13\x0f연두\x01");
    if EUDElseIf()(turnPlayer == 2):
        ct.f_printP(ct.cp, "\x13\x0f연두\x01")
        # (Line 262) else if(turnPlayer == 3) ct.printP(ct.cp, "\x13\x10보라\x01");
    if EUDElseIf()(turnPlayer == 3):
        ct.f_printP(ct.cp, "\x13\x10보라\x01")
        # (Line 263) else if(turnPlayer == 4) ct.printP(ct.cp, "\x13\x11주황\x01");
    if EUDElseIf()(turnPlayer == 4):
        ct.f_printP(ct.cp, "\x13\x11주황\x01")
        # (Line 264) else if(turnPlayer == 5) ct.printP(ct.cp, "\x13\x15갈색\x01");
    if EUDElseIf()(turnPlayer == 5):
        ct.f_printP(ct.cp, "\x13\x15갈색\x01")
        # (Line 265) else ct.printP(ct.cp, "\x13\x01예비");
    if EUDElse()():
        ct.f_printP(ct.cp, "\x13\x01예비")
        # (Line 267) }
    EUDEndIf()
    # (Line 269) function displayWind(windVal)

# (Line 270) {
@EUDFunc
def f_displayWind(windVal):
    # (Line 271) const wind = 5 - windVal;
    wind_1 = 5 - windVal
    # (Line 272) if(wind == -5) ct.printP(ct.cp, "\x12바람: \x0e◀◀◀◀◀▷▷▷▷▷\x01");
    if EUDIf()(wind_1 == -5):
        ct.f_printP(ct.cp, "\x12바람: \x0e◀◀◀◀◀▷▷▷▷▷\x01")
        # (Line 273) else if(wind == -4) ct.printP(ct.cp, "\x12바람: \x0e◁◀◀◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -4):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◀◀◀◀▷▷▷▷▷\x01")
        # (Line 274) else if(wind == -3) ct.printP(ct.cp, "\x12바람: \x0e◁◁◀◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -3):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◀◀◀▷▷▷▷▷\x01")
        # (Line 275) else if(wind == -2) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -2):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◀◀▷▷▷▷▷\x01")
        # (Line 276) else if(wind == -1) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -1):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◀▷▷▷▷▷\x01")
        # (Line 277) else if(wind == 0) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == 0):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▷▷▷▷▷\x01")
        # (Line 278) else if(wind == 1) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == 1):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▷▷▷▷\x01")
        # (Line 279) else if(wind == 2) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▷▷▷\x01");
    if EUDElseIf()(wind_1 == 2):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▷▷▷\x01")
        # (Line 280) else if(wind == 3) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▷▷\x01");
    if EUDElseIf()(wind_1 == 3):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▷▷\x01")
        # (Line 281) else if(wind == 4) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▷\x01");
    if EUDElseIf()(wind_1 == 4):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▷\x01")
        # (Line 282) else if(wind == 5) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▶\x01");
    if EUDElseIf()(wind_1 == 5):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▶\x01")
        # (Line 283) }
    EUDEndIf()

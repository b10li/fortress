## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 13) import eudEdit;
import eudEdit
# (Line 14) import tank.tankMain;
from tank import tankMain
# (Line 15) import tank.tankAim;
from tank import tankAim
# (Line 16) import tank.tankBullet;
from tank import tankBullet
# (Line 17) import util.utilEud;
from util import utilEud
# (Line 18) import header;
import header
# (Line 19) import physics;
import physics
# (Line 20) import customText3 as ct;
import customText3 as ct
# (Line 23) const RELEASE = 1;
RELEASE = _CGFW(lambda: [1], 1)[0]
# (Line 24) const turnArray = [0,1,2, 3,4,5,7];
turnArray = _CGFW(lambda: [_ARR(FlattenList([0, 1, 2, 3, 4, 5, 7]))], 1)[0]
# (Line 25) var turnPointer = 6;
turnPointer = EUDCreateVariables(1)
_IGVA([turnPointer], lambda: [6])
# (Line 26) var gameState = 0;
gameState = EUDCreateVariables(1)
_IGVA([gameState], lambda: [0])
# (Line 27) var preTurn = 7;
preTurn = EUDCreateVariables(1)
_IGVA([preTurn], lambda: [7])
# (Line 28) var wind = 0;
wind = EUDCreateVariables(1)
_IGVA([wind], lambda: [0])
# (Line 29) function onPluginStart()
# (Line 30) {
@EUDFunc
def onPluginStart():
    # (Line 31) eudEdit.memoryEdit();
    eudEdit.f_memoryEdit()
    # (Line 32) randomize();
    f_randomize()
    # (Line 33) }
    # (Line 34) function displayWind(windVal);

# (Line 35) function gameInfo(targetPlayer);
# (Line 36) function getPlayerText(turnPlayer);
# (Line 37) function getRandomTurn();
# (Line 38) function playerDeath();
# (Line 39) function teamVictory();
# (Line 40) function beforeTriggerExec()
# (Line 41) {
@EUDFunc
def beforeTriggerExec():
    # (Line 43) const turnPlayer = turnArray[turnPointer];
    turnPlayer = turnArray[turnPointer]
    # (Line 45) if(gameState == 0)
    if EUDIf()(gameState == 0):
        # (Line 46) {// 선택 끝나면 탱크 생성 이후 1
        # (Line 47) if(tankMain.selectTank())
        if EUDIf()(tankMain.f_selectTank()):
            # (Line 48) {
            # (Line 49) gameState = 1;
            gameState << (1)
            # (Line 50) }
            # (Line 51) }
        EUDEndIf()
        # (Line 52) if(gameState == 1)
    EUDEndIf()
    if EUDIf()(gameState == 1):
        # (Line 53) {
        # (Line 54) if(getRandomTurn());
        if EUDIf()(f_getRandomTurn()):
            # (Line 55) gameState = 10;
            pass
        EUDEndIf()
        gameState << (10)
        # (Line 56) }
        # (Line 57) if(gameState == 10)
    EUDEndIf()
    if EUDIf()(gameState == 10):
        # (Line 58) {
        # (Line 60) gameState = 2;
        gameState << (2)
        # (Line 61) }
        # (Line 62) if(gameState == 2)
    EUDEndIf()
    if EUDIf()(gameState == 2):
        # (Line 63) {//control
        # (Line 65) if(CountdownTimer(Exactly, 0))
        if EUDIf()(CountdownTimer(Exactly, 0)):
            # (Line 66) {//pre control
            # (Line 67) if(preTurn == turnPlayer && RELEASE)
            if EUDIf()(EUDSCAnd()(preTurn == turnPlayer)(RELEASE)()):
                # (Line 68) {// time end
                # (Line 70) SetDeaths(turnPlayer, SetTo, 0, 217);
                DoActions(SetDeaths(turnPlayer, SetTo, 0, 217))
                # (Line 71) SetResources(turnPlayer, SetTo, 0, Gas);
                DoActions(SetResources(turnPlayer, SetTo, 0, Gas))
                # (Line 72) SetDeaths(turnPlayer, SetTo, 0, header.shootNum);
                DoActions(SetDeaths(turnPlayer, SetTo, 0, header.shootNum))
                # (Line 73) tankMain.toggleDisable(turnPlayer, 0);
                tankMain.f_toggleDisable(turnPlayer, 0)
                # (Line 75) gameState = 4;
                gameState << (4)
                # (Line 76) return;
                EUDReturn()
                # (Line 77) }
                # (Line 78) if(turnPlayer !=7 && playerexist(turnPlayer))
            EUDEndIf()
            if EUDIf()(EUDSCAnd()(turnPlayer == 7, neg=True)(f_playerexist(turnPlayer))()):
                # (Line 79) {
                # (Line 81) wind = (rand()%22)/2;
                wind << ((f_rand() % 22) // 2)
                # (Line 82) SetCountdownTimer(SetTo, 40);
                DoActions(SetCountdownTimer(SetTo, 40))
                # (Line 83) tankMain.toggleDisable(turnPlayer, 1);
                tankMain.f_toggleDisable(turnPlayer, 1)
                # (Line 84) MoveLocation($L('loc1')+1, '(men)', turnPlayer, $L('PlayArea')+1);
                DoActions(MoveLocation(GetLocationIndex('loc1') + 1, '(men)', turnPlayer, GetLocationIndex('PlayArea') + 1))
                # (Line 85) CenterView($L('loc1')+1);
                DoActions(CenterView(GetLocationIndex('loc1') + 1))
                # (Line 86) }
                # (Line 87) else
                # (Line 88) {// dead or none player
            if EUDElse()():
                # (Line 89) turnArray[turnPointer] = 7;
                _ARRW(turnArray, turnPointer) << (7)
                # (Line 91) gameState = 4;
                gameState << (4)
                # (Line 92) }
                # (Line 94) }
            EUDEndIf()
            # (Line 95) if(CountdownTimer(AtLeast, 1))
        EUDEndIf()
        if EUDIf()(CountdownTimer(AtLeast, 1)):
            # (Line 96) {//start control
            # (Line 97) preTurn = turnPlayer;
            preTurn << (turnPlayer)
            # (Line 99) const chatPtr = dwread_epd(EPD(0x640B58));
            chatPtr = f_dwread_epd(EPD(0x640B58))
            # (Line 100) displayWind(wind);
            f_displayWind(wind)
            # (Line 101) getPlayerText(turnPlayer);
            f_getPlayerText(turnPlayer)
            # (Line 102) ct.printP(ct.cp, "\x13\x01차례");
            ct.f_printP(ct.cp, "\x13\x01차례")
            # (Line 103) gameInfo(turnPlayer);
            f_gameInfo(turnPlayer)
            # (Line 104) const check = tankMain.controlTank(turnPlayer);
            check = tankMain.f_controlTank(turnPlayer)
            # (Line 110) if (check == 0){}
            if EUDIf()(check == 0):
                # (Line 111) else
                # (Line 112) {//goto shoot state
                pass
            if EUDElse()():
                # (Line 113) gameState = 3;
                gameState << (3)
                # (Line 114) SetCountdownTimer(SetTo, 0);
                DoActions(SetCountdownTimer(SetTo, 0))
                # (Line 116) SetDeaths(turnPlayer, SetTo, 1, header.shootNum);
                DoActions(SetDeaths(turnPlayer, SetTo, 1, header.shootNum))
                # (Line 118) tankMain.toggleDisable(turnPlayer, 0);
                tankMain.f_toggleDisable(turnPlayer, 0)
                # (Line 119) }
                # (Line 121) dwwrite_epd(EPD(0x640B58), chatPtr);
            EUDEndIf()
            f_dwwrite_epd(EPD(0x640B58), chatPtr)
            # (Line 122) }
            # (Line 123) }
        EUDEndIf()
        # (Line 124) if(gameState == 3)
    EUDEndIf()
    if EUDIf()(gameState == 3):
        # (Line 125) {// shoot
        # (Line 126) const shootChance = utilEud.getDeath(turnPlayer, header.shootNum);
        shootChance = utilEud.f_getDeath(turnPlayer, header.shootNum)
        # (Line 127) if(shootChance > 0 && CountdownTimer(Exactly, 0))
        if EUDIf()(EUDSCAnd()(shootChance <= 0, neg=True)(CountdownTimer(Exactly, 0))()):
            # (Line 128) {
            # (Line 129) SetCountdownTimer(SetTo, 5);
            DoActions(SetCountdownTimer(SetTo, 5))
            # (Line 130) tankMain.shootMissile(turnPlayer);
            tankMain.f_shootMissile(turnPlayer)
            # (Line 131) SetDeaths(turnPlayer, Subtract, 1, header.shootNum);
            DoActions(SetDeaths(turnPlayer, Subtract, 1, header.shootNum))
            # (Line 132) }
            # (Line 133) else if(shootChance == 0 &&  CountdownTimer(Exactly, 0))
        if EUDElseIf()(EUDSCAnd()(shootChance == 0)(CountdownTimer(Exactly, 0))()):
            # (Line 134) {// end shooting
            # (Line 135) gameState = 4;
            gameState << (4)
            # (Line 136) }
            # (Line 138) }
        EUDEndIf()
        # (Line 139) if(gameState == 4)
    EUDEndIf()
    if EUDIf()(gameState == 4):
        # (Line 140) {// next
        # (Line 141) for(var i=0; i<6; i++){
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 6, neg=True):
            def _t17():
                i.__iadd__(1)
            # (Line 142) tankAim.clearAngle(i);
            tankAim.f_clearAngle(i)
            # (Line 143) }
            # (Line 144) turnPointer = (turnPointer+1)%6;
            EUDSetContinuePoint()
            _t17()
        EUDEndWhile()
        turnPointer << ((turnPointer + 1) % 6)
        # (Line 145) gameState = 2;
        gameState << (2)
        # (Line 146) }
        # (Line 147) if(gameState >= 2)
    EUDEndIf()
    if EUDIf()(gameState >= 2):
        # (Line 148) {
        # (Line 149) playerDeath();
        f_playerDeath()
        # (Line 150) if(RELEASE) teamVictory();
        if EUDIf()(RELEASE):
            f_teamVictory()
            # (Line 151) }
        EUDEndIf()
        # (Line 152) EUDPlayerLoop()();
    EUDEndIf()
    EUDPlayerLoop()()
    # (Line 153) SetAllianceStatus($AllPlayers, Ally);
    DoActions(SetAllianceStatus(17, Ally))
    # (Line 154) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 157) tankMain.renderTank();
    tankMain.f_renderTank()
    # (Line 158) tankBullet.renderBullet(wind);
    tankBullet.f_renderBullet(wind)
    # (Line 160) }
    # (Line 162) function teamVictory()

# (Line 163) {
@EUDFunc
def f_teamVictory():
    # (Line 164) if(Command($Force1, Exactly, 0, '(men)') || Command($Force3, Exactly, 0, '(men)'))
    if EUDIf()(EUDSCOr()(Command(18, Exactly, 0, '(men)'))(Command(20, Exactly, 0, '(men)'))()):
        # (Line 165) {
        # (Line 166) EUDPlayerLoop()();
        EUDPlayerLoop()()
        # (Line 167) Victory();
        DoActions(Victory())
        # (Line 168) EUDEndPlayerLoop();
        EUDEndPlayerLoop()
        # (Line 169) }
        # (Line 170) }
    EUDEndIf()
    # (Line 172) function gameInfo(targetPlayer)

# (Line 173) {
@EUDFunc
def f_gameInfo(targetPlayer):
    # (Line 174) ct.printP(targetPlayer, "\x07[조작법]");
    ct.f_printP(targetPlayer, "\x07[조작법]")
    # (Line 175) ct.printP(targetPlayer, "\x07[I],[K]: \x01각도");
    ct.f_printP(targetPlayer, "\x07[I],[K]: \x01각도")
    # (Line 176) ct.printP(targetPlayer, "\x07[J]: \x01발사파워 (꾹 누름)");
    ct.f_printP(targetPlayer, "\x07[J]: \x01발사파워 (꾹 누름)")
    # (Line 177) ct.printP(targetPlayer, "\x07[L]: \x01무기교체 ");
    ct.f_printP(targetPlayer, "\x07[L]: \x01무기교체 ")
    # (Line 178) ct.printP(targetPlayer, "\x01이동: \x01그냥 우클릭 무브해");
    ct.f_printP(targetPlayer, "\x01이동: \x01그냥 우클릭 무브해")
    # (Line 180) }
    # (Line 181) function playerDeath()

# (Line 182) {
@EUDFunc
def f_playerDeath():
    # (Line 183) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 184) {
        # (Line 185) if(turnArray[i] != 7 )
        if EUDIf()(turnArray[i] == 7, neg=True):
            # (Line 186) {
            # (Line 187) if(Bring(turnArray[i], Exactly, 0, '(men)', $L('PlayArea')+1))
            if EUDIf()(Bring(turnArray[i], Exactly, 0, '(men)', GetLocationIndex('PlayArea') + 1)):
                # (Line 188) {
                # (Line 189) if(tankMain.checkDeath(turnArray[i]))
                if EUDIf()(tankMain.f_checkDeath(turnArray[i])):
                    # (Line 190) {
                    # (Line 191) const chatPtr = dwread_epd(EPD(0x640B58));
                    chatPtr = f_dwread_epd(EPD(0x640B58))
                    # (Line 192) ct.printP(ct.cp, "\x13\x01사망");
                    ct.f_printP(ct.cp, "\x13\x01사망")
                    # (Line 193) getPlayerText(turnArray[i]);
                    f_getPlayerText(turnArray[i])
                    # (Line 194) dwwrite_epd(EPD(0x640B58), chatPtr);
                    f_dwwrite_epd(EPD(0x640B58), chatPtr)
                    # (Line 196) tankMain.removeTank(turnArray[i]);
                    tankMain.f_removeTank(turnArray[i])
                    # (Line 197) turnArray[i] = 7;
                    _ARRW(turnArray, i) << (7)
                    # (Line 198) }
                    # (Line 199) }
                EUDEndIf()
                # (Line 200) }
            EUDEndIf()
            # (Line 201) }
        EUDEndIf()
        # (Line 202) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 204) function getRandomTurn()

# (Line 205) {
@EUDFunc
def f_getRandomTurn():
    # (Line 206) for(var i = 0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 207) {
        # (Line 208) const rn = rand()%6;
        rn = f_rand() % 6
        # (Line 209) if(rn == i)
        if EUDIf()(rn == i):
            # (Line 210) {
            # (Line 211) continue;
            EUDContinue()
            # (Line 212) }
            # (Line 213) else
            # (Line 214) {//swap
        if EUDElse()():
            # (Line 215) const temp = turnArray[i];
            temp = turnArray[i]
            # (Line 216) turnArray[i] = turnArray[rn];
            _ARRW(turnArray, i) << (turnArray[rn])
            # (Line 217) turnArray[rn] = temp;
            _ARRW(turnArray, rn) << (temp)
            # (Line 218) }
            # (Line 219) }
        EUDEndIf()
        # (Line 220) for(var j=0; j<6; j++)
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    j = EUDVariable()
    j << (0)
    if EUDWhile()(j >= 6, neg=True):
        def _t5():
            j.__iadd__(1)
        # (Line 221) {
        # (Line 223) if(Deaths(turnArray[j], Exactly, 0, header.tankType))
        if EUDIf()(Deaths(turnArray[j], Exactly, 0, header.tankType)):
            # (Line 224) {
            # (Line 225) turnArray[j] = 7;
            _ARRW(turnArray, j) << (7)
            # (Line 226) }
            # (Line 227) }
        EUDEndIf()
        # (Line 228) return 1;
        EUDSetContinuePoint()
        _t5()
    EUDEndWhile()
    EUDReturn(1)
    # (Line 229) }
    # (Line 231) function getPlayerText(turnPlayer)

# (Line 232) {
@EUDFunc
def f_getPlayerText(turnPlayer):
    # (Line 235) if(turnPlayer == 0) ct.printP(ct.cp, "\x13\x06빨강\x01");
    if EUDIf()(turnPlayer == 0):
        ct.f_printP(ct.cp, "\x13\x06빨강\x01")
        # (Line 236) else if(turnPlayer == 1) ct.printP(ct.cp, "\x13\x0e파랑\x01");
    if EUDElseIf()(turnPlayer == 1):
        ct.f_printP(ct.cp, "\x13\x0e파랑\x01")
        # (Line 237) else if(turnPlayer == 2) ct.printP(ct.cp, "\x13\x0f연두\x01");
    if EUDElseIf()(turnPlayer == 2):
        ct.f_printP(ct.cp, "\x13\x0f연두\x01")
        # (Line 238) else if(turnPlayer == 3) ct.printP(ct.cp, "\x13\x10보라\x01");
    if EUDElseIf()(turnPlayer == 3):
        ct.f_printP(ct.cp, "\x13\x10보라\x01")
        # (Line 239) else if(turnPlayer == 4) ct.printP(ct.cp, "\x13\x11주황\x01");
    if EUDElseIf()(turnPlayer == 4):
        ct.f_printP(ct.cp, "\x13\x11주황\x01")
        # (Line 240) else if(turnPlayer == 5) ct.printP(ct.cp, "\x13\x15갈색\x01");
    if EUDElseIf()(turnPlayer == 5):
        ct.f_printP(ct.cp, "\x13\x15갈색\x01")
        # (Line 242) }
    EUDEndIf()
    # (Line 244) function displayWind(windVal)

# (Line 245) {
@EUDFunc
def f_displayWind(windVal):
    # (Line 246) const wind = 5 - windVal;
    wind_1 = 5 - windVal
    # (Line 247) if(wind == -5) ct.printP(ct.cp, "\x12바람: \x0e◀◀◀◀◀▷▷▷▷▷\x01");
    if EUDIf()(wind_1 == -5):
        ct.f_printP(ct.cp, "\x12바람: \x0e◀◀◀◀◀▷▷▷▷▷\x01")
        # (Line 248) else if(wind == -4) ct.printP(ct.cp, "\x12바람: \x0e◁◀◀◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -4):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◀◀◀◀▷▷▷▷▷\x01")
        # (Line 249) else if(wind == -3) ct.printP(ct.cp, "\x12바람: \x0e◁◁◀◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -3):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◀◀◀▷▷▷▷▷\x01")
        # (Line 250) else if(wind == -2) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◀◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -2):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◀◀▷▷▷▷▷\x01")
        # (Line 251) else if(wind == -1) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◀▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == -1):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◀▷▷▷▷▷\x01")
        # (Line 252) else if(wind == 0) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▷▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == 0):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▷▷▷▷▷\x01")
        # (Line 253) else if(wind == 1) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▷▷▷▷\x01");
    if EUDElseIf()(wind_1 == 1):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▷▷▷▷\x01")
        # (Line 254) else if(wind == 2) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▷▷▷\x01");
    if EUDElseIf()(wind_1 == 2):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▷▷▷\x01")
        # (Line 255) else if(wind == 3) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▷▷\x01");
    if EUDElseIf()(wind_1 == 3):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▷▷\x01")
        # (Line 256) else if(wind == 4) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▷\x01");
    if EUDElseIf()(wind_1 == 4):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▷\x01")
        # (Line 257) else if(wind == 5) ct.printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▶\x01");
    if EUDElseIf()(wind_1 == 5):
        ct.f_printP(ct.cp, "\x12바람: \x0e◁◁◁◁◁▶▶▶▶▶\x01")
        # (Line 258) }
    EUDEndIf()

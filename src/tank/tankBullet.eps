import header;
import util.utilEud;
import util.utilMath;
import tank.tankAim;
import tank.tankWeapon;
import physics;


const TOPSPEED = 30;
const BOTSPEED = 2;
// physics -----------------------------------------------------
const gravity = 1;
const pTargetArray = EUDArray(10);
var epdnum = 0;
var framebool = 0;    
//epd가 저장된 배열을 돌며 0 이 아닌걸 물리적용함
function push(unitEpd)
{
    pTargetArray[epdnum] = unitEpd;
    epdnum = epdnum + 1;
}
function popmid(unitEpd)
{
    for(var i=0; i<10; i++)
    {
        if(pTargetArray[i] == unitEpd)
        {
            pTargetArray[i] = 0;
            epdnum = epdnum - 1;
        }
    }
}
function boom(unitType, locID);
function speedLimit(v);
function renderBullet(wind)
{//bullet physics
    for(var i=0; i<10; i++)
    {
        if(pTargetArray[i])
        {
            const locID = $L('locBullet');
            const unitEpd = pTargetArray[i];
            const unitType = utilEud.getUnitType(unitEpd);
            physics.renderUnit(unitEpd, 1);
            MoveLocation(locID+1, unitType, $P7, $L('locDst')+1);
            if(pTargetArray[0]) CenterView(locID+1);
            //collision
            if(Bring($P8, AtLeast, 1, '(buildings)', locID+1)
                || Bring($Force1, AtLeast, 1, '(men)', locID+1)
                || Bring($Force3, AtLeast, 1, '(men)', locID+1))
            {
                popmid(unitEpd);
                RemoveUnitAt(1, '(men)', locID+1, $P7);
                boom(unitType, locID);
            }
            else
            {
                var vx, vy = physics.getVxy(unitEpd);
                // speed limit
                vx = speedLimit(vx);
                vy = speedLimit(vy);
                const nw = 2- wind/2;
                // slower accleration
                if(framebool == 0) physics.setVxy(unitEpd, vx, vy + gravity);
                else if(framebool == 1) physics.setVxy(unitEpd, vx, vy);
                else if(framebool == 2) physics.setVxy(unitEpd, vx, vy);
                else physics.setVxy(unitEpd, vx + nw, vy + gravity);
                framebool = (framebool+1)%4;
            }
        }
    }
}
function speedLimit(v)
{
    if(utilMath.abs(v) > (TOPSPEED + BOTSPEED)) 
    {
        if(v >= 0x80000000) v = -(TOPSPEED + BOTSPEED);
        else v = (TOPSPEED + BOTSPEED);
    }
    return v;
}
// shoot & create ----------------------------------------------------

function getBullet(unitType, num);
function toggleBullet(unitEpd)
{
    const unitType = utilEud.getUnitType(unitEpd);
    const player = utilEud.getPlayerID(unitEpd);
    // Q++
    const nextQ = (utilEud.getDeath(player, header.bulletQ)+1)%2;
    SetDeaths(player, SetTo, nextQ, header.bulletQ);
    const bullet = getBullet(unitType, nextQ);
    // change ui
    utilEud.setBuildQueue1(unitEpd, bullet);
}

function makeBullet(unitType, x, y, angle, speed)
{
    const locID = $L('locBullet');
    utilEud.moveLocationXY(locID, x, y);
    const unitEpd = epdread_epd(EPD(0x628438));
    CreateUnit(1, unitType, locID+1, $P7);
    // speed : 100(max) = x : 32(maxspeed)
    // and +minimum
    const changedSpeed = TOPSPEED * speed/100 + BOTSPEED;
    const vx, vy = lengthdir(changedSpeed, angle);
    physics.setVxy(unitEpd, vx, vy);
    push(unitEpd);
}

function shoot(unitEpd)
{
    const x, y = utilEud.getUnitXY(unitEpd);
    // shoot from distances
    const speed = utilEud.getKillCount(unitEpd); //killcount
    const angle = tankAim.getAngle(unitEpd);
    const dx, dy = lengthdir(32, angle);
    const targetPlayer = utilEud.getPlayerID(unitEpd);
    const unitType = utilEud.getUnitType(unitEpd);
    const bullet = getBullet(unitType, utilEud.getDeath(targetPlayer, header.bulletQ));
    // 총알 종류에 따른 다양한 생성
    if(bullet == 47)
    {
        for (var i=1; i<4; i++){
            makeBullet(bullet, x+dx, y+dy, angle+i, speed);
        }
    }
    if(unitType == header.Devourer) makeBullet(bullet, x+dx, y+dy + 32, angle, speed);
    makeBullet(bullet, x+dx, y+dy, angle, speed);
}

function getWeapon(unitType);
function boom(unitType, locID)
{
    const bombUnit = 50;
    //change Weapon
    tankWeapon.setWeapon(unitType);
    //dwwrite(0x6564E0 + 1992 + 54 * 4, 150);
    const unitEpd = epdread_epd(EPD(0x628438));
    //create
    CreateUnitWithProperties(1, bombUnit, locID+1, $P7, UnitProperty(invincible=true));
    const unitPos = dwread_epd(unitEpd + 0x28/4); 
    //suicide attack
    dwwrite_epd(unitEpd + 0x58/4, unitPos);
    utilEud.setOrderID(unitEpd, 135);
}
// 무기
function getBullet(unitType, num)
{
    if(unitType == header.Dragoon){
        if(num) return 60;   //bullet1
        else    return 70;   //bullet2
    }
    else if(unitType == header.Reaver){
        if(num) return 71;   //bullet1
        else    return 69;   //bullet2
    }
    else if(unitType == header.Ursadon){
        if(num) return 94;   //bullet1
        else    return 95;   //bullet2
    }
    else if(unitType == header.Darchon){
        if(num) return 72;   //bullet1
        else    return 80;   //bullet2
    }
    else if(unitType == header.Devourer){
        if(num) return 43;   //bullet1
        else    return 44;   //bullet2
    }
    else if(unitType == header.Tank){
        if(num) return 12;   //bullet1
        else    return 8;   //bullet2
    }
    else if(unitType == header.Goliath){
        if(num) return 9;   //bullet1
        else    return 28;   //bullet2
    }
    else if(unitType == header.Vulture){
        if(num) return 11;   //bullet1
        else    return 21;   //bullet2
    }
    else if(unitType == header.Lurker){
        if(num) return 45;   //bullet1
        else    return 47;   //bullet2
    }
    else if(unitType == header.Ultralisk){
        if(num) return 42;   //bullet1 overlord
        else    return 57;   //bullet2
    }
}

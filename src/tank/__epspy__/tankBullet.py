## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import header;
import header
# (Line 2) import util.utilEud;
from util import utilEud
# (Line 3) import util.utilMath;
from util import utilMath
# (Line 4) import tank.tankAim;
from tank import tankAim
# (Line 5) import tank.tankWeapon;
from tank import tankWeapon
# (Line 6) import physics;
import physics
# (Line 9) const TOPSPEED = 30;
TOPSPEED = _CGFW(lambda: [30], 1)[0]
# (Line 10) const BOTSPEED = 2;
BOTSPEED = _CGFW(lambda: [2], 1)[0]
# (Line 12) const gravity = 1;
gravity = _CGFW(lambda: [1], 1)[0]
# (Line 13) const pTargetArray = EUDArray(10);
pTargetArray = _CGFW(lambda: [EUDArray(10)], 1)[0]
# (Line 14) var epdnum = 0;
epdnum = EUDCreateVariables(1)
_IGVA([epdnum], lambda: [0])
# (Line 15) var framebool = 0;
framebool = EUDCreateVariables(1)
_IGVA([framebool], lambda: [0])
# (Line 17) function push(unitEpd)
# (Line 18) {
@EUDFunc
def f_push(unitEpd):
    # (Line 19) pTargetArray[epdnum] = unitEpd;
    _ARRW(pTargetArray, epdnum) << (unitEpd)
    # (Line 20) epdnum = epdnum + 1;
    epdnum << (epdnum + 1)
    # (Line 21) }
    # (Line 22) function popmid(unitEpd)

# (Line 23) {
@EUDFunc
def f_popmid(unitEpd):
    # (Line 24) for(var i=0; i<10; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 10, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 25) {
        # (Line 26) if(pTargetArray[i] == unitEpd)
        if EUDIf()(pTargetArray[i] == unitEpd):
            # (Line 27) {
            # (Line 28) pTargetArray[i] = 0;
            _ARRW(pTargetArray, i) << (0)
            # (Line 29) epdnum = epdnum - 1;
            epdnum << (epdnum - 1)
            # (Line 30) }
            # (Line 31) }
        EUDEndIf()
        # (Line 32) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 33) function boom(unitType, locID);

# (Line 34) function speedLimit(v);
# (Line 35) function renderBullet(wind)
# (Line 36) {//bullet physics
@EUDFunc
def f_renderBullet(wind):
    # (Line 37) for(var i=0; i<10; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 10, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 38) {
        # (Line 39) if(pTargetArray[i])
        if EUDIf()(pTargetArray[i]):
            # (Line 40) {
            # (Line 41) const locID = $L('locBullet');
            locID = GetLocationIndex('locBullet')
            # (Line 42) const unitEpd = pTargetArray[i];
            unitEpd = pTargetArray[i]
            # (Line 43) const unitType = utilEud.getUnitType(unitEpd);
            unitType = utilEud.f_getUnitType(unitEpd)
            # (Line 44) physics.renderUnit(unitEpd, 1);
            physics.f_renderUnit(unitEpd, 1)
            # (Line 45) MoveLocation(locID+1, unitType, $P7, $L('locDst')+1);
            DoActions(MoveLocation(locID + 1, unitType, 6, GetLocationIndex('locDst') + 1))
            # (Line 46) if(pTargetArray[0]) CenterView(locID+1);
            if EUDIf()(pTargetArray[0]):
                DoActions(CenterView(locID + 1))
                # (Line 48) if(Bring($P8, AtLeast, 1, '(buildings)', locID+1)
            EUDEndIf()
            _t5 = EUDIf()
            # (Line 49) || Bring($Force1, AtLeast, 1, '(men)', locID+1)
            # (Line 50) || Bring($Force3, AtLeast, 1, '(men)', locID+1))
            if _t5(EUDSCOr()(Bring(7, AtLeast, 1, '(buildings)', locID + 1))(Bring(18, AtLeast, 1, '(men)', locID + 1))(Bring(20, AtLeast, 1, '(men)', locID + 1))()):
                # (Line 51) {
                # (Line 52) popmid(unitEpd);
                f_popmid(unitEpd)
                # (Line 53) RemoveUnitAt(1, '(men)', locID+1, $P7);
                DoActions(RemoveUnitAt(1, '(men)', locID + 1, 6))
                # (Line 54) boom(unitType, locID);
                f_boom(unitType, locID)
                # (Line 55) }
                # (Line 56) else
                # (Line 57) {
            if EUDElse()():
                # (Line 58) var vx, vy = physics.getVxy(unitEpd);
                vx, vy = _MVAR([physics.f_getVxy(unitEpd)])
                # (Line 60) vx = speedLimit(vx);
                vx << (f_speedLimit(vx))
                # (Line 61) vy = speedLimit(vy);
                vy << (f_speedLimit(vy))
                # (Line 62) const nw = 2- wind/2;
                nw = 2 - wind // 2
                # (Line 64) if(framebool == 0) physics.setVxy(unitEpd, vx, vy + gravity);
                if EUDIf()(framebool == 0):
                    physics.f_setVxy(unitEpd, vx, vy + gravity)
                    # (Line 65) else if(framebool == 1) physics.setVxy(unitEpd, vx, vy);
                if EUDElseIf()(framebool == 1):
                    physics.f_setVxy(unitEpd, vx, vy)
                    # (Line 66) else if(framebool == 2) physics.setVxy(unitEpd, vx, vy);
                if EUDElseIf()(framebool == 2):
                    physics.f_setVxy(unitEpd, vx, vy)
                    # (Line 67) else physics.setVxy(unitEpd, vx + nw, vy + gravity);
                if EUDElse()():
                    physics.f_setVxy(unitEpd, vx + nw, vy + gravity)
                    # (Line 68) framebool = (framebool+1)%4;
                EUDEndIf()
                framebool << ((framebool + 1) % 4)
                # (Line 69) }
                # (Line 70) }
            EUDEndIf()
            # (Line 71) }
        EUDEndIf()
        # (Line 72) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 73) function speedLimit(v)

# (Line 74) {
@EUDFunc
def f_speedLimit(v):
    # (Line 75) if(utilMath.abs(v) > (TOPSPEED + BOTSPEED))
    if EUDIf()(utilMath.f_abs(v) <= (TOPSPEED + BOTSPEED), neg=True):
        # (Line 76) {
        # (Line 77) if(v >= 0x80000000) v = -(TOPSPEED + BOTSPEED);
        if EUDIf()(v >= 0x80000000):
            v << (-(TOPSPEED + BOTSPEED))
            # (Line 78) else v = (TOPSPEED + BOTSPEED);
        if EUDElse()():
            v << ((TOPSPEED + BOTSPEED))
            # (Line 79) }
        EUDEndIf()
        # (Line 80) return v;
    EUDEndIf()
    EUDReturn(v)
    # (Line 81) }
    # (Line 84) function getBullet(unitType, num);

# (Line 85) function toggleBullet(unitEpd)
# (Line 86) {
@EUDFunc
def f_toggleBullet(unitEpd):
    # (Line 87) const unitType = utilEud.getUnitType(unitEpd);
    unitType = utilEud.f_getUnitType(unitEpd)
    # (Line 88) const player = utilEud.getPlayerID(unitEpd);
    player = utilEud.f_getPlayerID(unitEpd)
    # (Line 90) const nextQ = (utilEud.getDeath(player, header.bulletQ)+1)%2;
    nextQ = (utilEud.f_getDeath(player, header.bulletQ) + 1) % 2
    # (Line 91) SetDeaths(player, SetTo, nextQ, header.bulletQ);
    DoActions(SetDeaths(player, SetTo, nextQ, header.bulletQ))
    # (Line 92) const bullet = getBullet(unitType, nextQ);
    bullet = f_getBullet(unitType, nextQ)
    # (Line 94) utilEud.setBuildQueue1(unitEpd, bullet);
    utilEud.f_setBuildQueue1(unitEpd, bullet)
    # (Line 95) }
    # (Line 97) function makeBullet(unitType, x, y, angle, speed)

# (Line 98) {
@EUDFunc
def f_makeBullet(unitType, x, y, angle, speed):
    # (Line 99) const locID = $L('locBullet');
    locID = GetLocationIndex('locBullet')
    # (Line 100) utilEud.moveLocationXY(locID, x, y);
    utilEud.f_moveLocationXY(locID, x, y)
    # (Line 101) const unitEpd = epdread_epd(EPD(0x628438));
    unitEpd = f_epdread_epd(EPD(0x628438))
    # (Line 102) CreateUnit(1, unitType, locID+1, $P7);
    DoActions(CreateUnit(1, unitType, locID + 1, 6))
    # (Line 105) const changedSpeed = TOPSPEED * speed/100 + BOTSPEED;
    changedSpeed = TOPSPEED * speed // 100 + BOTSPEED
    # (Line 106) const vx, vy = lengthdir(changedSpeed, angle);
    vx, vy = List2Assignable([f_lengthdir(changedSpeed, angle)])
    # (Line 107) physics.setVxy(unitEpd, vx, vy);
    physics.f_setVxy(unitEpd, vx, vy)
    # (Line 108) push(unitEpd);
    f_push(unitEpd)
    # (Line 109) }
    # (Line 111) function shoot(unitEpd)

# (Line 112) {
@EUDFunc
def f_shoot(unitEpd):
    # (Line 113) const x, y = utilEud.getUnitXY(unitEpd);
    x, y = List2Assignable([utilEud.f_getUnitXY(unitEpd)])
    # (Line 115) const speed = utilEud.getKillCount(unitEpd); //killcount
    speed = utilEud.f_getKillCount(unitEpd)
    # (Line 116) const angle = tankAim.getAngle(unitEpd);
    angle = tankAim.f_getAngle(unitEpd)
    # (Line 117) const dx, dy = lengthdir(32, angle);
    dx, dy = List2Assignable([f_lengthdir(32, angle)])
    # (Line 118) const targetPlayer = utilEud.getPlayerID(unitEpd);
    targetPlayer = utilEud.f_getPlayerID(unitEpd)
    # (Line 119) const unitType = utilEud.getUnitType(unitEpd);
    unitType = utilEud.f_getUnitType(unitEpd)
    # (Line 120) const bullet = getBullet(unitType, utilEud.getDeath(targetPlayer, header.bulletQ));
    bullet = f_getBullet(unitType, utilEud.f_getDeath(targetPlayer, header.bulletQ))
    # (Line 122) if(bullet == 47)
    if EUDIf()(bullet == 47):
        # (Line 123) {
        # (Line 124) for (var i=1; i<4; i++){
        i = EUDVariable()
        i << (1)
        if EUDWhile()(i >= 4, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 125) makeBullet(bullet, x+dx, y+dy, angle+i, speed);
            f_makeBullet(bullet, x + dx, y + dy, angle + i, speed)
            # (Line 126) }
            # (Line 127) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 128) if(unitType == header.Devourer) makeBullet(bullet, x+dx, y+dy + 32, angle, speed);
    EUDEndIf()
    if EUDIf()(unitType == header.Devourer):
        f_makeBullet(bullet, x + dx, y + dy + 32, angle, speed)
        # (Line 129) makeBullet(bullet, x+dx, y+dy, angle, speed);
    EUDEndIf()
    f_makeBullet(bullet, x + dx, y + dy, angle, speed)
    # (Line 130) }
    # (Line 132) function getWeapon(unitType);

# (Line 133) function boom(unitType, locID)
# (Line 134) {
@EUDFunc
def f_boom(unitType, locID):
    # (Line 135) const bombUnit = 50;
    bombUnit = 50
    # (Line 137) tankWeapon.setWeapon(unitType);
    tankWeapon.f_setWeapon(unitType)
    # (Line 139) const unitEpd = epdread_epd(EPD(0x628438));
    unitEpd = f_epdread_epd(EPD(0x628438))
    # (Line 141) CreateUnitWithProperties(1, bombUnit, locID+1, $P7, UnitProperty(invincible=true));
    DoActions(CreateUnitWithProperties(1, bombUnit, locID + 1, 6, UnitProperty(invincible=True)))
    # (Line 142) const unitPos = dwread_epd(unitEpd + 0x28/4);
    unitPos = f_dwread_epd(unitEpd + 0x28 // 4)
    # (Line 144) dwwrite_epd(unitEpd + 0x58/4, unitPos);
    f_dwwrite_epd(unitEpd + 0x58 // 4, unitPos)
    # (Line 145) utilEud.setOrderID(unitEpd, 135);
    utilEud.f_setOrderID(unitEpd, 135)
    # (Line 146) }
    # (Line 148) function getBullet(unitType, num)

# (Line 149) {
@EUDFunc
def f_getBullet(unitType, num):
    # (Line 150) if(unitType == header.Dragoon){
    if EUDIf()(unitType == header.Dragoon):
        # (Line 151) if(num) return 60;   //bullet1
        if EUDIf()(num):
            EUDReturn(60)
            # (Line 152) else    return 70;   //bullet2
        if EUDElse()():
            EUDReturn(70)
            # (Line 153) }
        EUDEndIf()
        # (Line 154) else if(unitType == header.Reaver){
    if EUDElseIf()(unitType == header.Reaver):
        # (Line 155) if(num) return 71;   //bullet1
        if EUDIf()(num):
            EUDReturn(71)
            # (Line 156) else    return 69;   //bullet2
        if EUDElse()():
            EUDReturn(69)
            # (Line 157) }
        EUDEndIf()
        # (Line 158) else if(unitType == header.Ursadon){
    if EUDElseIf()(unitType == header.Ursadon):
        # (Line 159) if(num) return 94;   //bullet1
        if EUDIf()(num):
            EUDReturn(94)
            # (Line 160) else    return 95;   //bullet2
        if EUDElse()():
            EUDReturn(95)
            # (Line 161) }
        EUDEndIf()
        # (Line 162) else if(unitType == header.Darchon){
    if EUDElseIf()(unitType == header.Darchon):
        # (Line 163) if(num) return 72;   //bullet1
        if EUDIf()(num):
            EUDReturn(72)
            # (Line 164) else    return 80;   //bullet2
        if EUDElse()():
            EUDReturn(80)
            # (Line 165) }
        EUDEndIf()
        # (Line 166) else if(unitType == header.Devourer){
    if EUDElseIf()(unitType == header.Devourer):
        # (Line 167) if(num) return 43;   //bullet1
        if EUDIf()(num):
            EUDReturn(43)
            # (Line 168) else    return 44;   //bullet2
        if EUDElse()():
            EUDReturn(44)
            # (Line 169) }
        EUDEndIf()
        # (Line 170) else if(unitType == header.Tank){
    if EUDElseIf()(unitType == header.Tank):
        # (Line 171) if(num) return 12;   //bullet1
        if EUDIf()(num):
            EUDReturn(12)
            # (Line 172) else    return 8;   //bullet2
        if EUDElse()():
            EUDReturn(8)
            # (Line 173) }
        EUDEndIf()
        # (Line 174) else if(unitType == header.Goliath){
    if EUDElseIf()(unitType == header.Goliath):
        # (Line 175) if(num) return 9;   //bullet1
        if EUDIf()(num):
            EUDReturn(9)
            # (Line 176) else    return 28;   //bullet2
        if EUDElse()():
            EUDReturn(28)
            # (Line 177) }
        EUDEndIf()
        # (Line 178) else if(unitType == header.Vulture){
    if EUDElseIf()(unitType == header.Vulture):
        # (Line 179) if(num) return 11;   //bullet1
        if EUDIf()(num):
            EUDReturn(11)
            # (Line 180) else    return 21;   //bullet2
        if EUDElse()():
            EUDReturn(21)
            # (Line 181) }
        EUDEndIf()
        # (Line 182) else if(unitType == header.Lurker){
    if EUDElseIf()(unitType == header.Lurker):
        # (Line 183) if(num) return 45;   //bullet1
        if EUDIf()(num):
            EUDReturn(45)
            # (Line 184) else    return 47;   //bullet2
        if EUDElse()():
            EUDReturn(47)
            # (Line 185) }
        EUDEndIf()
        # (Line 186) else if(unitType == header.Ultralisk){
    if EUDElseIf()(unitType == header.Ultralisk):
        # (Line 187) if(num) return 42;   //bullet1 overlord
        if EUDIf()(num):
            EUDReturn(42)
            # (Line 188) else    return 57;   //bullet2
        if EUDElse()():
            EUDReturn(57)
            # (Line 189) }
        EUDEndIf()
        # (Line 190) }
    EUDEndIf()

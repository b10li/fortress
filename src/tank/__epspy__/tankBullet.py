## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import util.utilEud;
from util import utilEud
# (Line 2) import physics;
import physics
# (Line 4) const TOPSPEED = 32;
TOPSPEED = _CGFW(lambda: [32], 1)[0]
# (Line 5) const BOTSPEED = 4;
BOTSPEED = _CGFW(lambda: [4], 1)[0]
# (Line 8) function makeBullet(unitType, x, y, angle, speed)
# (Line 9) {
@EUDFunc
def f_makeBullet(unitType, x, y, angle, speed):
    # (Line 10) const locID = $L('locBullet');
    locID = GetLocationIndex('locBullet')
    # (Line 11) utilEud.moveLocationXY(locID, x, y);
    utilEud.f_moveLocationXY(locID, x, y)
    # (Line 13) const epd = epdread_epd(EPD(0x628438));
    epd = f_epdread_epd(EPD(0x628438))
    # (Line 14) CreateUnitWithProperties(1, unitType, locID+1, $P7, UnitProperty(invincible = true));
    DoActions(CreateUnitWithProperties(1, unitType, locID + 1, 6, UnitProperty(invincible=True)))
    # (Line 17) const changedSpeed = TOPSPEED * speed/200 + BOTSPEED;
    changedSpeed = TOPSPEED * speed // 200 + BOTSPEED
    # (Line 18) const vx, vy = lengthdir(changedSpeed, angle);
    vx, vy = List2Assignable([f_lengthdir(changedSpeed, angle)])
    # (Line 19) physics.setVxy(epd, vx, vy);
    physics.f_setVxy(epd, vx, vy)
    # (Line 20) physics.push(epd);
    physics.f_push(epd)
    # (Line 21) }
    # (Line 23) function shoot(unitEpd, angle, speed)

# (Line 24) {
@EUDFunc
def f_shoot(unitEpd, angle, speed):
    # (Line 25) const x, y = utilEud.getUnitXY(unitEpd);
    x, y = List2Assignable([utilEud.f_getUnitXY(unitEpd)])
    # (Line 27) const dx, dy = lengthdir(32, angle);
    dx, dy = List2Assignable([f_lengthdir(32, angle)])
    # (Line 30) makeBullet(47, x+dx, y+dy, angle, speed);
    f_makeBullet(47, x + dx, y + dy, angle, speed)
    # (Line 31) }

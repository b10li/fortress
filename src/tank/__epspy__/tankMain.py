## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import header;
import header
# (Line 2) import util.utilEud;
from util import utilEud
# (Line 3) import tank.tankAim;
from tank import tankAim
# (Line 4) import tank.tankBullet;
from tank import tankBullet
# (Line 5) import tank.tankSelect;
from tank import tankSelect
# (Line 6) import physics;
import physics
# (Line 7) import customText3 as ct;
import customText3 as ct
# (Line 9) const tankEpd = EUDArray(6);
tankEpd = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 10) const locList = [$L('p1'), $L('p2'), $L('p3'), $L('p4'), $L('p5'), $L('p6')];
locList = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex('p1'), GetLocationIndex('p2'), GetLocationIndex('p3'), GetLocationIndex('p4'), GetLocationIndex('p5'), GetLocationIndex('p6')]))], 1)[0]
# (Line 14) function toggleDisable(index);
# (Line 15) function newTank(targetPlayer, unitType)
# (Line 16) {
@EUDFunc
def f_newTank(targetPlayer, unitType):
    # (Line 17) if(unitType)
    if EUDIf()(unitType):
        # (Line 18) {
        # (Line 19) const locID = locList[targetPlayer];
        locID = locList[targetPlayer]
        # (Line 21) tankEpd[targetPlayer] = epdread_epd(EPD(0x628438));
        _ARRW(tankEpd, targetPlayer) << (f_epdread_epd(EPD(0x628438)))
        # (Line 22) CreateUnit(1, unitType, locID+1, targetPlayer);
        DoActions(CreateUnit(1, unitType, locID + 1, targetPlayer))
        # (Line 24) SetMemoryEPD(tankEpd[targetPlayer]+ 0x034 / 4, SetTo, 200); //speed
        DoActions(SetMemoryEPD(tankEpd[targetPlayer] + 0x034 // 4, SetTo, 200))
        # (Line 25) utilEud.setRemainingBuildtime(tankEpd[targetPlayer], header.maxbuildtime); // power
        utilEud.f_setRemainingBuildtime(tankEpd[targetPlayer], header.maxbuildtime)
        # (Line 26) tankAim.setAngle(tankEpd[targetPlayer], 300); //angle
        tankAim.f_setAngle(tankEpd[targetPlayer], 300)
        # (Line 27) physics.setVxy(tankEpd[targetPlayer], 0, 10); //gravity
        physics.f_setVxy(tankEpd[targetPlayer], 0, 10)
        # (Line 29) const bullet = tankBullet.getBullet(unitType, utilEud.getDeath(targetPlayer, header.bulletQ));
        bullet = tankBullet.f_getBullet(unitType, utilEud.f_getDeath(targetPlayer, header.bulletQ))
        # (Line 30) utilEud.setBuildQueue1(tankEpd[targetPlayer], bullet);
        utilEud.f_setBuildQueue1(tankEpd[targetPlayer], bullet)
        # (Line 32) toggleDisable(targetPlayer, 0);
        f_toggleDisable(targetPlayer, 0)
        # (Line 33) CenterView(locID+1);
        DoActions(CenterView(locID + 1))
        # (Line 34) }
        # (Line 36) }
    EUDEndIf()
    # (Line 38) function removeTank(targetPlayer)

# (Line 39) {
@EUDFunc
def f_removeTank(targetPlayer):
    # (Line 40) tankEpd[targetPlayer] = 0;
    _ARRW(tankEpd, targetPlayer) << (0)
    # (Line 41) }
    # (Line 42) function getTankEpd(targetPlayer)

# (Line 43) {
@EUDFunc
def f_getTankEpd(targetPlayer):
    # (Line 44) return tankEpd[targetPlayer];
    EUDReturn(tankEpd[targetPlayer])
    # (Line 45) }
    # (Line 47) function checkDeath(targetPlayer)

# (Line 48) {
@EUDFunc
def f_checkDeath(targetPlayer):
    # (Line 49) if(Deaths(targetPlayer, Exactly, 1, utilEud.getUnitType(tankEpd[targetPlayer])))
    if EUDIf()(Deaths(targetPlayer, Exactly, 1, utilEud.f_getUnitType(tankEpd[targetPlayer]))):
        # (Line 50) return 1;
        EUDReturn(1)
        # (Line 51) else
        # (Line 52) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 53) }
    EUDEndIf()
    # (Line 54) function controlTank(targetPlayer)

# (Line 55) {// 키인식으로
@EUDFunc
def f_controlTank(targetPlayer):
    # (Line 56) const angleNum = 4; //단위
    angleNum = 4
    # (Line 57) const unitEpd = getTankEpd(targetPlayer);
    unitEpd = f_getTankEpd(targetPlayer)
    # (Line 58) const power = utilEud.getRemainingBuildtime(unitEpd);
    power = utilEud.f_getRemainingBuildtime(unitEpd)
    # (Line 59) const angle = tankAim.getAngle(unitEpd);
    angle = tankAim.f_getAngle(unitEpd)
    # (Line 61) const locID = $L('loc_tank');
    locID = GetLocationIndex('loc_tank')
    # (Line 62) const orderID = utilEud.getOrderID(unitEpd);
    orderID = utilEud.f_getOrderID(unitEpd)
    # (Line 63) const keyValue = utilEud.getDeath(targetPlayer, header.keydeath);
    keyValue = utilEud.f_getDeath(targetPlayer, header.keydeath)
    # (Line 65) if(orderID == 6)  // while moving
    if EUDIf()(orderID == 6):
        # (Line 66) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 68) if(1 == keyValue)
    EUDEndIf()
    if EUDIf()(1 == keyValue):
        # (Line 69) {// angle UP
        # (Line 70) utilEud.setOrderID(unitEpd, 107);
        utilEud.f_setOrderID(unitEpd, 107)
        # (Line 71) tankAim.setAngle(unitEpd, angle + angleNum);
        tankAim.f_setAngle(unitEpd, angle + angleNum)
        # (Line 72) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 73) }
        # (Line 74) else if(2 == keyValue)
    if EUDElseIf()(2 == keyValue):
        # (Line 75) {// angle DOWN
        # (Line 76) utilEud.setOrderID(unitEpd, 107);
        utilEud.f_setOrderID(unitEpd, 107)
        # (Line 77) tankAim.setAngle(unitEpd, angle - angleNum);
        tankAim.f_setAngle(unitEpd, angle - angleNum)
        # (Line 78) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 79) }
        # (Line 80) else if (4 == keyValue && Switch(targetPlayer, Cleared))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue)(Switch(targetPlayer, Cleared))()):
        # (Line 81) {// shoot inital key press
        # (Line 83) utilEud.setRemainingBuildtime(unitEpd, header.maxbuildtime);
        utilEud.f_setRemainingBuildtime(unitEpd, header.maxbuildtime)
        # (Line 84) SetSwitch(targetPlayer, Set);
        DoActions(SetSwitch(targetPlayer, Set))
        # (Line 86) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 87) }
        # (Line 88) else if (4 != keyValue && Switch(targetPlayer, Set))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue, neg=True)(Switch(targetPlayer, Set))()):
        # (Line 89) {// shoot end key press
        # (Line 90) SetDeaths(targetPlayer, Add, 1, 217);
        DoActions(SetDeaths(targetPlayer, Add, 1, 217))
        # (Line 91) }
        # (Line 92) else if (4 == keyValue && Switch(targetPlayer, Set))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue)(Switch(targetPlayer, Set))()):
        # (Line 93) {// shoot while pressing
        # (Line 94) utilEud.setRemainingBuildtime(unitEpd, power -2);
        utilEud.f_setRemainingBuildtime(unitEpd, power - 2)
        # (Line 95) SetResources(targetPlayer, SetTo, 101-power, Gas);
        DoActions(SetResources(targetPlayer, SetTo, 101 - power, Gas))
        # (Line 96) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 97) }
        # (Line 98) else if (8 == keyValue && Switch(targetPlayer+6, Cleared))
    if EUDElseIf()(EUDSCAnd()(8 == keyValue)(Switch(targetPlayer + 6, Cleared))()):
        # (Line 99) {// change weapon
        # (Line 101) ct.printP(targetPlayer, ""); // ct.cp는 모두에게 출력
        ct.f_printP(targetPlayer, "")
        # (Line 102) ct.printP(targetPlayer, "\x13\x07[ \x0e무기 변경\x07 ] \x01");
        ct.f_printP(targetPlayer, "\x13\x07[ \x0e무기 변경\x07 ] \x01")
        # (Line 104) SetSwitch(targetPlayer+6, Set);
        DoActions(SetSwitch(targetPlayer + 6, Set))
        # (Line 106) SetDeaths(targetPlayer, SetTo, 6, 218);
        DoActions(SetDeaths(targetPlayer, SetTo, 6, 218))
        # (Line 107) tankBullet.toggleBullet(unitEpd);
        tankBullet.f_toggleBullet(unitEpd)
        # (Line 108) }
        # (Line 110) if(8 != keyValue && Switch(targetPlayer+6, Set))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(8 == keyValue, neg=True)(Switch(targetPlayer + 6, Set))()):
        # (Line 111) {// change weapon keydelay
        # (Line 112) SetDeaths(targetPlayer, Subtract, 1, 218);
        DoActions(SetDeaths(targetPlayer, Subtract, 1, 218))
        # (Line 114) }
        # (Line 115) else if(8 == keyValue && Switch(targetPlayer+6, Set))
    if EUDElseIf()(EUDSCAnd()(8 == keyValue)(Switch(targetPlayer + 6, Set))()):
        # (Line 116) {// change weapon keydelay
        # (Line 117) SetDeaths(targetPlayer, SetTo, 6, 218);
        DoActions(SetDeaths(targetPlayer, SetTo, 6, 218))
        # (Line 118) }
        # (Line 120) if(Deaths(targetPlayer, Exactly, 0, 218) && Switch(targetPlayer+6, Set))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Deaths(targetPlayer, Exactly, 0, 218))(Switch(targetPlayer + 6, Set))()):
        # (Line 121) {// change weapon keydelay
        # (Line 122) SetSwitch(targetPlayer+6, Clear);
        DoActions(SetSwitch(targetPlayer + 6, Clear))
        # (Line 123) }
        # (Line 124) if (Deaths(targetPlayer, AtLeast, 8, 217) || power == 0)
    EUDEndIf()
    if EUDIf()(EUDSCOr()(Deaths(targetPlayer, AtLeast, 8, 217))(power == 0)()):
        # (Line 125) {// shoot key delay
        # (Line 126) utilEud.setRemainingBuildtime(unitEpd, header.maxbuildtime);
        utilEud.f_setRemainingBuildtime(unitEpd, header.maxbuildtime)
        # (Line 127) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 128) SetSwitch(targetPlayer, Clear);
        DoActions(SetSwitch(targetPlayer, Clear))
        # (Line 129) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 131) utilEud.setKillCount(unitEpd, (header.maxbuildtime+1) - power);
        utilEud.f_setKillCount(unitEpd, (header.maxbuildtime + 1) - power)
        # (Line 132) return unitEpd;
        EUDReturn(unitEpd)
        # (Line 133) }
        # (Line 134) else
        # (Line 135) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 137) }
    EUDEndIf()
    # (Line 138) function reduceStasis(unitEpd);

# (Line 139) function renderTank()
# (Line 140) {//tank physics
@EUDFunc
def f_renderTank():
    # (Line 141) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 142) {
        # (Line 143) const unitEpd = tankEpd[i];
        unitEpd = tankEpd[i]
        # (Line 144) if(unitEpd)
        if EUDIf()(unitEpd):
            # (Line 145) {
            # (Line 146) const unitType = utilEud.getUnitType(unitEpd);
            unitType = utilEud.f_getUnitType(unitEpd)
            # (Line 147) const player = utilEud.getPlayerID(unitEpd);
            player = utilEud.f_getPlayerID(unitEpd)
            # (Line 148) if(!utilEud.isAtLocation(unitEpd, $L('PlayArea')))
            if EUDIf()(utilEud.f_isAtLocation(unitEpd, GetLocationIndex('PlayArea')), neg=True):
                # (Line 149) {
                # (Line 150) tankEpd[i] = 0;
                _ARRW(tankEpd, i) << (0)
                # (Line 151) KillUnit(unitType, player);
                DoActions(KillUnit(unitType, player))
                # (Line 152) RemoveUnit('(any unit)', player);
                DoActions(RemoveUnit('(any unit)', player))
                # (Line 153) }
                # (Line 154) else if(player == $P12)
            if EUDElseIf()(player == 11):
                # (Line 155) {
                # (Line 156) tankEpd[i] = 0;
                _ARRW(tankEpd, i) << (0)
                # (Line 157) RemoveUnit('(any unit)', $P12);
                DoActions(RemoveUnit('(any unit)', 11))
                # (Line 158) }
                # (Line 159) MoveLocation($L('locTank')+1, unitType, i, 'Anywhere');
            EUDEndIf()
            DoActions(MoveLocation(GetLocationIndex('locTank') + 1, unitType, i, 'Anywhere'))
            # (Line 161) if(Bring($P8, Exactly, 0, '(buildings)', $L('locTank')+1))
            if EUDIf()(Bring(7, Exactly, 0, '(buildings)', GetLocationIndex('locTank') + 1)):
                # (Line 162) {
                # (Line 163) physics.renderUnit(unitEpd, 0);
                physics.f_renderUnit(unitEpd, 0)
                # (Line 164) }
                # (Line 165) }
            EUDEndIf()
            # (Line 166) }
        EUDEndIf()
        # (Line 167) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 169) function randomSelect()

# (Line 170) {
@EUDFunc
def f_randomSelect():
    # (Line 171) for(var i=0; i<6; i++){
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 172) if(Command(i, Exactly, 1, header.Flag) && !tankSelect.isListed(utilEud.getUnitType(tankEpd[i]))){
        if EUDIf()(EUDSCAnd()(Command(i, Exactly, 1, header.Flag))(tankSelect.f_isListed(utilEud.f_getUnitType(tankEpd[i])), neg=True)()):
            # (Line 173) SetDeaths(i, SetTo, header.List[(rand()%header.ListNum) * 3], header.tankType);
            DoActions(SetDeaths(i, SetTo, header.List[(f_rand() % header.ListNum) * 3], header.tankType))
            # (Line 174) RemoveUnit(header.Flag, i);
            DoActions(RemoveUnit(header.Flag, i))
            # (Line 175) }
            # (Line 176) }
        EUDEndIf()
        # (Line 177) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 178) function selectTank()

# (Line 179) {
@EUDFunc
def f_selectTank():
    # (Line 180) if(tankSelect.isSelecting())
    if EUDIf()(tankSelect.f_isSelecting()):
        # (Line 181) {
        # (Line 182) tankSelect.selectScreen();
        tankSelect.f_selectScreen()
        # (Line 183) return 0;
        EUDReturn(0)
        # (Line 184) }
        # (Line 185) else
        # (Line 186) {
    if EUDElse()():
        # (Line 187) EUDPlayerLoop()();
        EUDPlayerLoop()()
        # (Line 188) const p = getcurpl();
        p = f_getcurpl()
        # (Line 189) if(p<6)
        if EUDIf()(p >= 6, neg=True):
            # (Line 190) {
            # (Line 191) const tankType = utilEud.getDeath(p, header.tankType);
            tankType = utilEud.f_getDeath(p, header.tankType)
            # (Line 192) if(tankType) // 0 or sth
            if EUDIf()(tankType):
                # (Line 193) {
                # (Line 194) newTank(p, tankType);
                f_newTank(p, tankType)
                # (Line 195) }
                # (Line 196) }
            EUDEndIf()
            # (Line 197) EUDEndPlayerLoop();
        EUDEndIf()
        EUDEndPlayerLoop()
        # (Line 198) return 1;
        EUDReturn(1)
        # (Line 199) }
        # (Line 200) }
    EUDEndIf()
    # (Line 202) function shootMissile(index)

# (Line 203) {
@EUDFunc
def f_shootMissile(index):
    # (Line 204) tankBullet.shoot(tankEpd[index]);
    tankBullet.f_shoot(tankEpd[index])
    # (Line 205) }
    # (Line 207) function toggleDisable(index, status)

# (Line 208) {
@EUDFunc
def f_toggleDisable(index, status):
    # (Line 209) const unitEpd = tankEpd[index];
    unitEpd = tankEpd[index]
    # (Line 210) const statusFlag = dwread_epd(unitEpd + 0x0DC / 4);
    statusFlag = f_dwread_epd(unitEpd + 0x0DC // 4)
    # (Line 211) const disableFlag = 0x1000;
    disableFlag = 0x1000
    # (Line 212) utilEud.setOrderID(unitEpd, 107); //hold
    utilEud.f_setOrderID(unitEpd, 107)
    # (Line 213) if(statusFlag == (statusFlag | disableFlag) && status == 1)
    if EUDIf()(EUDSCAnd()(statusFlag == (statusFlag | disableFlag))(status == 1)()):
        # (Line 214) {// isDisabled -> enable
        # (Line 216) SetMemoryEPD(unitEpd + 0x0DC / 4, Subtract, disableFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, Subtract, disableFlag))
        # (Line 217) }
        # (Line 218) else if(status == 0)
    if EUDElseIf()(status == 0):
        # (Line 219) {// isNormal -> disable
        # (Line 220) SetMemoryEPD(unitEpd + 0x0DC / 4, SetTo, statusFlag | disableFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, SetTo, statusFlag | disableFlag))
        # (Line 221) }
        # (Line 222) }
    EUDEndIf()

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import util.utilEud;
from util import utilEud
# (Line 2) import tank.tankAim;
from tank import tankAim
# (Line 4) const unitTank = 5;
unitTank = _CGFW(lambda: [5], 1)[0]
# (Line 5) const loc1 = $L('loc1');
loc1 = _CGFW(lambda: [GetLocationIndex('loc1')], 1)[0]
# (Line 6) const tankEpd = EUDArray(6);
tankEpd = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 8) function newTank(targetPlayer)
# (Line 9) {
@EUDFunc
def f_newTank(targetPlayer):
    # (Line 10) tankEpd[targetPlayer] = epdread_epd(EPD(0x628438));
    _ARRW(tankEpd, targetPlayer) << (f_epdread_epd(EPD(0x628438)))
    # (Line 11) CreateUnit(1, unitTank, loc1+1, targetPlayer);
    DoActions(CreateUnit(1, unitTank, loc1 + 1, targetPlayer))
    # (Line 13) tankAim.setAngle(tankEpd[targetPlayer], 100); //init
    tankAim.f_setAngle(tankEpd[targetPlayer], 100)
    # (Line 14) }
    # (Line 16) function getTankEpd(targetPlayer)

# (Line 17) {
@EUDFunc
def f_getTankEpd(targetPlayer):
    # (Line 18) return tankEpd;
    EUDReturn(tankEpd)
    # (Line 19) }
    # (Line 21) function controlTank(targetPlayer)

# (Line 22) {// 키인식으로 MurakamiShiinaQC.py
@EUDFunc
def f_controlTank(targetPlayer):
    # (Line 23) const angleUnit = 10; //단위
    angleUnit = 10
    # (Line 24) const gaugeUnit = 1; //unitid
    gaugeUnit = 1
    # (Line 26) const unitEpd = getTankEpd(targetPlayer);
    unitEpd = f_getTankEpd(targetPlayer)
    # (Line 27) const angle = tankAim.getAngle(unitEpd);
    angle = tankAim.f_getAngle(unitEpd)
    # (Line 28) const deathUnit = 0;
    deathUnit = 0
    # (Line 29) const locID = $L('loc_tank');
    locID = GetLocationIndex('loc_tank')
    # (Line 31) tankAim.showLaunchAngle(unitEpd);
    tankAim.f_showLaunchAngle(unitEpd)
    # (Line 33) if(1 == utilEud.getDeath(targetPlayer, deathUnit))
    if EUDIf()(1 == utilEud.f_getDeath(targetPlayer, deathUnit)):
        # (Line 34) {// angle UP
        # (Line 35) tankAim.setAngle(unitEpd, angle + angleUnit);
        tankAim.f_setAngle(unitEpd, angle + angleUnit)
        # (Line 36) }
        # (Line 37) else if(2 == utilEud.getDeath(targetPlayer, deathUnit))
    if EUDElseIf()(2 == utilEud.f_getDeath(targetPlayer, deathUnit)):
        # (Line 38) {// angle DOWN
        # (Line 39) tankAim.setAngle(unitEpd, angle - angleUnit);
        tankAim.f_setAngle(unitEpd, angle - angleUnit)
        # (Line 40) }
        # (Line 44) else if (4 == utilEud.getDeath(targetPlayer, deathUnit)
    _t3 = EUDElseIf()
    # (Line 45) && Command(targetPlayer, Exactly, 0, gaugeUnit))
    if _t3(EUDSCAnd()(4 == utilEud.f_getDeath(targetPlayer, deathUnit))(Command(targetPlayer, Exactly, 0, gaugeUnit))()):
        # (Line 46) {// shoot 1st key press
        # (Line 47) const x,y = utilEud.getUnitXY(unitEpd);
        x, y = List2Assignable([utilEud.f_getUnitXY(unitEpd)])
        # (Line 48) utilEud.moveLocationXY(locID, x, y);
        utilEud.f_moveLocationXY(locID, x, y)
        # (Line 49) CreateUnit(1, gaugeUnit, locID+1, targetPlayer);
        DoActions(CreateUnit(1, gaugeUnit, locID + 1, targetPlayer))
        # (Line 50) Order(gaugeUnit, targetPlayer, 'Anywhere', Move, $L('loc_aim'));
        DoActions(Order(gaugeUnit, targetPlayer, 'Anywhere', Move, GetLocationIndex('loc_aim')))
        # (Line 51) }
        # (Line 52) else if (4 == utilEud.getDeath(targetPlayer, deathUnit)
    _t4 = EUDElseIf()
    # (Line 53) && Command(targetPlayer, Exactly, 1, gaugeUnit))
    if _t4(EUDSCAnd()(4 == utilEud.f_getDeath(targetPlayer, deathUnit))(Command(targetPlayer, Exactly, 1, gaugeUnit))()):
        # (Line 54) {// shoot 2nd key press
        # (Line 55) RemoveUnit(gaugeUnit, targetPlayer);
        DoActions(RemoveUnit(gaugeUnit, targetPlayer))
        # (Line 57) }
        # (Line 58) }
    EUDEndIf()

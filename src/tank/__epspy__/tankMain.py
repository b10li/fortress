## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import util.utilEud;
from util import utilEud
# (Line 2) import tank.tankAim;
from tank import tankAim
# (Line 4) const unitTank = 5;
unitTank = _CGFW(lambda: [5], 1)[0]
# (Line 5) const loc1 = $L('loc1');
loc1 = _CGFW(lambda: [GetLocationIndex('loc1')], 1)[0]
# (Line 6) const tankEpd = EUDArray(6);
tankEpd = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 8) function newTank(targetPlayer)
# (Line 9) {
@EUDFunc
def f_newTank(targetPlayer):
    # (Line 10) tankEpd[targetPlayer] = epdread_epd(EPD(0x628438));
    _ARRW(tankEpd, targetPlayer) << (f_epdread_epd(EPD(0x628438)))
    # (Line 11) CreateUnit(1, unitTank, loc1+1, targetPlayer);
    DoActions(CreateUnit(1, unitTank, loc1 + 1, targetPlayer))
    # (Line 13) tankAim.setAngle(tankEpd[targetPlayer], 100); //init
    tankAim.f_setAngle(tankEpd[targetPlayer], 100)
    # (Line 14) }
    # (Line 16) function getTankEpd(targetPlayer)

# (Line 17) {
@EUDFunc
def f_getTankEpd(targetPlayer):
    # (Line 18) return tankEpd[targetPlayer];
    EUDReturn(tankEpd[targetPlayer])
    # (Line 19) }
    # (Line 21) function controlTank(targetPlayer)

# (Line 22) {// 키인식으로 MurakamiShiinaQC.py
@EUDFunc
def f_controlTank(targetPlayer):
    # (Line 23) const angleNum = 10; //단위
    angleNum = 10
    # (Line 24) const gaugeUnit = 47; //unitid
    gaugeUnit = 47
    # (Line 25) const deathUnit = 0;
    deathUnit = 0
    # (Line 27) const unitEpd = getTankEpd(targetPlayer);
    unitEpd = f_getTankEpd(targetPlayer)
    # (Line 28) const energy = utilEud.getUnitEnergy(unitEpd);
    energy = utilEud.f_getUnitEnergy(unitEpd)
    # (Line 29) const angle = tankAim.getAngle(unitEpd);
    angle = tankAim.f_getAngle(unitEpd)
    # (Line 31) SetResources(0, SetTo, angle, Ore);
    DoActions(SetResources(0, SetTo, angle, Ore))
    # (Line 33) const locID = $L('loc_tank');
    locID = GetLocationIndex('loc_tank')
    # (Line 35) const orderID = utilEud.getOrderID(unitEpd);
    orderID = utilEud.f_getOrderID(unitEpd)
    # (Line 36) const death = utilEud.getDeath(targetPlayer, deathUnit);
    death = utilEud.f_getDeath(targetPlayer, deathUnit)
    # (Line 37) if(orderID == 6)  // move
    if EUDIf()(orderID == 6):
        # (Line 38) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 40) if(1 == death)
    EUDEndIf()
    if EUDIf()(1 == death):
        # (Line 41) {// angle UP
        # (Line 42) tankAim.setAngle(unitEpd, angle + angleNum);
        tankAim.f_setAngle(unitEpd, angle + angleNum)
        # (Line 43) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 44) }
        # (Line 45) else if(2 == death)
    if EUDElseIf()(2 == death):
        # (Line 46) {// angle DOWN
        # (Line 47) tankAim.setAngle(unitEpd, angle - angleNum);
        tankAim.f_setAngle(unitEpd, angle - angleNum)
        # (Line 48) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 49) }
        # (Line 53) else if (4 == death
    _t4 = EUDElseIf()
    # (Line 54) && Accumulate(targetPlayer, Exactly, 0, Gas))
    if _t4(EUDSCAnd()(4 == death)(Accumulate(targetPlayer, Exactly, 0, Gas))()):
        # (Line 55) {// shoot inital key press
        # (Line 57) SetResources(targetPlayer, SetTo, 1, Gas);
        DoActions(SetResources(targetPlayer, SetTo, 1, Gas))
        # (Line 58) SetMemoryEPD(unitEpd + 0xA0 / 4, SetTo, 0);
        DoActions(SetMemoryEPD(unitEpd + 0xA0 // 4, SetTo, 0))
        # (Line 59) }
        # (Line 60) else if (4 != death
    _t5 = EUDElseIf()
    # (Line 61) && Accumulate(targetPlayer, Exactly, 1, Gas)
    # (Line 62) || energy == 200)
    if _t5(EUDSCOr()(EUDSCAnd()(4 == death, neg=True)(Accumulate(targetPlayer, Exactly, 1, Gas))())(energy == 200)()):
        # (Line 63) {// end key press
        # (Line 64) SetResources(targetPlayer, SetTo, 0, Gas);
        DoActions(SetResources(targetPlayer, SetTo, 0, Gas))
        # (Line 65) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 67) }
        # (Line 68) else if (4 == death
    _t6 = EUDElseIf()
    # (Line 69) && Accumulate(targetPlayer, Exactly, 1, Gas))
    if _t6(EUDSCAnd()(4 == death)(Accumulate(targetPlayer, Exactly, 1, Gas))()):
        # (Line 70) {// shoot key pressing
        # (Line 71) SetMemoryEPD(unitEpd + 0xA0 / 4, Add, 3*0x1000000);
        DoActions(SetMemoryEPD(unitEpd + 0xA0 // 4, Add, 3 * 0x1000000))
        # (Line 72) }
        # (Line 73) }
    EUDEndIf()

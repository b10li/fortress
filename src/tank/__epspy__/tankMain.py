## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import header;
import header
# (Line 2) import util.utilEud;
from util import utilEud
# (Line 3) import tank.tankAim;
from tank import tankAim
# (Line 4) import tank.tankBullet;
from tank import tankBullet
# (Line 5) import tank.tankSelect;
from tank import tankSelect
# (Line 6) import physics;
import physics
# (Line 7) import customText3 as ct;
import customText3 as ct
# (Line 9) const tankEpd = EUDArray(6);
tankEpd = _CGFW(lambda: [EUDArray(6)], 1)[0]
# (Line 10) const locList = [$L('p1'), $L('p2'), $L('p3'), $L('p4'), $L('p5'), $L('p6')];
locList = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex('p1'), GetLocationIndex('p2'), GetLocationIndex('p3'), GetLocationIndex('p4'), GetLocationIndex('p5'), GetLocationIndex('p6')]))], 1)[0]
# (Line 12) function toggleDisable(index);
# (Line 13) function newTank(targetPlayer, unitType)
# (Line 14) {
@EUDFunc
def f_newTank(targetPlayer, unitType):
    # (Line 15) if(unitType)
    if EUDIf()(unitType):
        # (Line 16) {
        # (Line 17) const locID = locList[targetPlayer];
        locID = locList[targetPlayer]
        # (Line 18) tankEpd[targetPlayer] = epdread_epd(EPD(0x628438));
        _ARRW(tankEpd, targetPlayer) << (f_epdread_epd(EPD(0x628438)))
        # (Line 19) CreateUnit(1, unitType, locID+1, targetPlayer);
        DoActions(CreateUnit(1, unitType, locID + 1, targetPlayer))
        # (Line 21) utilEud.setRemainingBuildtime(tankEpd[targetPlayer], header.maxbuildtime);
        utilEud.f_setRemainingBuildtime(tankEpd[targetPlayer], header.maxbuildtime)
        # (Line 22) tankAim.setAngle(tankEpd[targetPlayer], 300);
        tankAim.f_setAngle(tankEpd[targetPlayer], 300)
        # (Line 23) physics.setVxy(tankEpd[targetPlayer], 0, 10);
        physics.f_setVxy(tankEpd[targetPlayer], 0, 10)
        # (Line 25) const bullet = tankBullet.getBullet(unitType, utilEud.getDeath(targetPlayer, header.bulletQ));
        bullet = tankBullet.f_getBullet(unitType, utilEud.f_getDeath(targetPlayer, header.bulletQ))
        # (Line 26) utilEud.setBuildQueue1(tankEpd[targetPlayer], bullet);
        utilEud.f_setBuildQueue1(tankEpd[targetPlayer], bullet)
        # (Line 28) toggleDisable(targetPlayer, 0);
        f_toggleDisable(targetPlayer, 0)
        # (Line 29) CenterView(locID+1);
        DoActions(CenterView(locID + 1))
        # (Line 30) }
        # (Line 32) }
    EUDEndIf()
    # (Line 34) function removeTank(targetPlayer)

# (Line 35) {
@EUDFunc
def f_removeTank(targetPlayer):
    # (Line 36) tankEpd[targetPlayer] = 0;
    _ARRW(tankEpd, targetPlayer) << (0)
    # (Line 37) }
    # (Line 38) function getTankEpd(targetPlayer)

# (Line 39) {
@EUDFunc
def f_getTankEpd(targetPlayer):
    # (Line 40) return tankEpd[targetPlayer];
    EUDReturn(tankEpd[targetPlayer])
    # (Line 41) }
    # (Line 43) function checkDeath(targetPlayer)

# (Line 44) {
@EUDFunc
def f_checkDeath(targetPlayer):
    # (Line 45) if(Deaths(targetPlayer, Exactly, 1, utilEud.getUnitType(tankEpd[targetPlayer])))
    if EUDIf()(Deaths(targetPlayer, Exactly, 1, utilEud.f_getUnitType(tankEpd[targetPlayer]))):
        # (Line 46) return 1;
        EUDReturn(1)
        # (Line 47) else
        # (Line 48) return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 49) }
    EUDEndIf()
    # (Line 50) function controlTank(targetPlayer)

# (Line 51) {// 키인식으로
@EUDFunc
def f_controlTank(targetPlayer):
    # (Line 53) const angleNum = 2; //단위
    angleNum = 2
    # (Line 54) const unitEpd = getTankEpd(targetPlayer);
    unitEpd = f_getTankEpd(targetPlayer)
    # (Line 57) const power = utilEud.getRemainingBuildtime(unitEpd);
    power = utilEud.f_getRemainingBuildtime(unitEpd)
    # (Line 58) const angle = tankAim.getAngle(unitEpd);
    angle = tankAim.f_getAngle(unitEpd)
    # (Line 60) const locID = $L('loc_tank');
    locID = GetLocationIndex('loc_tank')
    # (Line 61) const orderID = utilEud.getOrderID(unitEpd);
    orderID = utilEud.f_getOrderID(unitEpd)
    # (Line 62) const keyValue = utilEud.getDeath(targetPlayer, header.keydeath);
    keyValue = utilEud.f_getDeath(targetPlayer, header.keydeath)
    # (Line 64) if(orderID == 6)  // while moving
    if EUDIf()(orderID == 6):
        # (Line 65) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 67) if(1 == keyValue)
    EUDEndIf()
    if EUDIf()(1 == keyValue):
        # (Line 68) {// angle UP
        # (Line 69) tankAim.setAngle(unitEpd, angle + angleNum);
        tankAim.f_setAngle(unitEpd, angle + angleNum)
        # (Line 70) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 71) }
        # (Line 72) else if(2 == keyValue)
    if EUDElseIf()(2 == keyValue):
        # (Line 73) {// angle DOWN
        # (Line 74) tankAim.setAngle(unitEpd, angle - angleNum);
        tankAim.f_setAngle(unitEpd, angle - angleNum)
        # (Line 75) tankAim.showLaunchAngle(unitEpd);
        tankAim.f_showLaunchAngle(unitEpd)
        # (Line 76) }
        # (Line 77) else if (4 == keyValue && Accumulate(targetPlayer, Exactly, 0, Gas))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue)(Accumulate(targetPlayer, Exactly, 0, Gas))()):
        # (Line 78) {// shoot inital key press
        # (Line 80) utilEud.setRemainingBuildtime(unitEpd, header.maxbuildtime);
        utilEud.f_setRemainingBuildtime(unitEpd, header.maxbuildtime)
        # (Line 81) SetResources(targetPlayer, SetTo, 1, Gas);
        DoActions(SetResources(targetPlayer, SetTo, 1, Gas))
        # (Line 83) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 84) }
        # (Line 85) else if (4 != keyValue && Accumulate(targetPlayer, Exactly, 1, Gas))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue, neg=True)(Accumulate(targetPlayer, Exactly, 1, Gas))()):
        # (Line 86) {// end key press
        # (Line 87) SetDeaths(targetPlayer, Add, 1, 217);
        DoActions(SetDeaths(targetPlayer, Add, 1, 217))
        # (Line 88) }
        # (Line 89) else if (4 == keyValue && Accumulate(targetPlayer, Exactly, 1, Gas))
    if EUDElseIf()(EUDSCAnd()(4 == keyValue)(Accumulate(targetPlayer, Exactly, 1, Gas))()):
        # (Line 90) {
        # (Line 91) utilEud.setRemainingBuildtime(unitEpd, power -1);
        utilEud.f_setRemainingBuildtime(unitEpd, power - 1)
        # (Line 92) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 93) }
        # (Line 94) else if (8 == keyValue && Switch(targetPlayer, Cleared))
    if EUDElseIf()(EUDSCAnd()(8 == keyValue)(Switch(targetPlayer, Cleared))()):
        # (Line 95) {// change weapon
        # (Line 97) ct.printP(targetPlayer, ""); // ct.cp는 모두에게 출력
        ct.f_printP(targetPlayer, "")
        # (Line 98) ct.printP(targetPlayer, "\x13[ 무기 교체 ] ");
        ct.f_printP(targetPlayer, "\x13[ 무기 교체 ] ")
        # (Line 100) tankBullet.toggleBullet(unitEpd);
        tankBullet.f_toggleBullet(unitEpd)
        # (Line 101) SetSwitch(targetPlayer, Set);
        DoActions(SetSwitch(targetPlayer, Set))
        # (Line 102) }
        # (Line 103) if(8 != keyValue && Switch(targetPlayer, Set))
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(8 == keyValue, neg=True)(Switch(targetPlayer, Set))()):
        # (Line 104) {// change weapon keydelay
        # (Line 105) SetSwitch(targetPlayer, Clear);
        DoActions(SetSwitch(targetPlayer, Clear))
        # (Line 106) }
        # (Line 109) if (Deaths(targetPlayer, AtLeast, 12, 217) || power == 0)
    EUDEndIf()
    if EUDIf()(EUDSCOr()(Deaths(targetPlayer, AtLeast, 12, 217))(power == 0)()):
        # (Line 110) {// end key press for 1sec
        # (Line 111) utilEud.setRemainingBuildtime(unitEpd, header.maxbuildtime);
        utilEud.f_setRemainingBuildtime(unitEpd, header.maxbuildtime)
        # (Line 112) SetDeaths(targetPlayer, SetTo, 0, 217);
        DoActions(SetDeaths(targetPlayer, SetTo, 0, 217))
        # (Line 113) SetResources(targetPlayer, SetTo, 0, Gas);
        DoActions(SetResources(targetPlayer, SetTo, 0, Gas))
        # (Line 114) tankAim.clearAngle(targetPlayer);
        tankAim.f_clearAngle(targetPlayer)
        # (Line 116) utilEud.setKillCount(unitEpd, (header.maxbuildtime+1) - power);
        utilEud.f_setKillCount(unitEpd, (header.maxbuildtime + 1) - power)
        # (Line 117) return unitEpd;
        EUDReturn(unitEpd)
        # (Line 118) }
        # (Line 119) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 121) }
    EUDEndIf()
    # (Line 123) function renderTank()

# (Line 124) {//tank physics
@EUDFunc
def f_renderTank():
    # (Line 125) for(var i=0; i<6; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 6, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 126) {
        # (Line 127) if(tankEpd[i])
        if EUDIf()(tankEpd[i]):
            # (Line 128) {
            # (Line 129) const unitType = utilEud.getUnitType(tankEpd[i]);
            unitType = utilEud.f_getUnitType(tankEpd[i])
            # (Line 130) MoveLocation($L('locTank')+1, unitType, i, 'Anywhere');
            DoActions(MoveLocation(GetLocationIndex('locTank') + 1, unitType, i, 'Anywhere'))
            # (Line 132) if(Bring($P8, Exactly, 0, '(buildings)', $L('locTank')+1))
            if EUDIf()(Bring(7, Exactly, 0, '(buildings)', GetLocationIndex('locTank') + 1)):
                # (Line 133) {
                # (Line 134) physics.renderUnit(tankEpd[i], 0);
                physics.f_renderUnit(tankEpd[i], 0)
                # (Line 135) }
                # (Line 136) }
            EUDEndIf()
            # (Line 137) }
        EUDEndIf()
        # (Line 138) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 140) function selectTank()

# (Line 141) {
@EUDFunc
def f_selectTank():
    # (Line 142) if(tankSelect.isSelecting())
    if EUDIf()(tankSelect.f_isSelecting()):
        # (Line 143) {
        # (Line 144) tankSelect.selectScreen();
        tankSelect.f_selectScreen()
        # (Line 145) return 0;
        EUDReturn(0)
        # (Line 146) }
        # (Line 147) else
        # (Line 148) {
    if EUDElse()():
        # (Line 149) EUDPlayerLoop()();
        EUDPlayerLoop()()
        # (Line 150) const p = getcurpl();
        p = f_getcurpl()
        # (Line 151) if(p<6)
        if EUDIf()(p >= 6, neg=True):
            # (Line 152) {
            # (Line 153) const tankType = utilEud.getDeath(p, header.tankType);
            tankType = utilEud.f_getDeath(p, header.tankType)
            # (Line 154) if(tankType) // 0 or sth
            if EUDIf()(tankType):
                # (Line 155) {
                # (Line 156) newTank(p, tankType);
                f_newTank(p, tankType)
                # (Line 157) }
                # (Line 159) }
            EUDEndIf()
            # (Line 160) EUDEndPlayerLoop();
        EUDEndIf()
        EUDEndPlayerLoop()
        # (Line 161) return 1;
        EUDReturn(1)
        # (Line 162) }
        # (Line 163) }
    EUDEndIf()
    # (Line 165) function shootMissile(index)

# (Line 166) {
@EUDFunc
def f_shootMissile(index):
    # (Line 167) tankBullet.shoot(tankEpd[index]);
    tankBullet.f_shoot(tankEpd[index])
    # (Line 168) }
    # (Line 170) function toggleDisable(index, status)

# (Line 171) {
@EUDFunc
def f_toggleDisable(index, status):
    # (Line 172) const unitEpd = tankEpd[index];
    unitEpd = tankEpd[index]
    # (Line 173) const statusFlag = dwread_epd(unitEpd + 0x0DC / 4);
    statusFlag = f_dwread_epd(unitEpd + 0x0DC // 4)
    # (Line 174) const disableFlag = 0x1000;
    disableFlag = 0x1000
    # (Line 176) if(statusFlag == (statusFlag | disableFlag) && status == 1)
    if EUDIf()(EUDSCAnd()(statusFlag == (statusFlag | disableFlag))(status == 1)()):
        # (Line 177) {// isDisabled -> enable
        # (Line 179) SetMemoryEPD(unitEpd + 0x0DC / 4, Subtract, disableFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, Subtract, disableFlag))
        # (Line 180) }
        # (Line 181) else if(status == 0)
    if EUDElseIf()(status == 0):
        # (Line 182) {// isNormal -> disable
        # (Line 183) SetMemoryEPD(unitEpd + 0x0DC / 4, SetTo, statusFlag | disableFlag);
        DoActions(SetMemoryEPD(unitEpd + 0x0DC // 4, SetTo, statusFlag | disableFlag))
        # (Line 184) }
        # (Line 185) }
    EUDEndIf()

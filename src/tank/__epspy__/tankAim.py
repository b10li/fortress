## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import util.utilEud;
from util import utilEud
# (Line 3) function setAngle(unitEpd, angle)
# (Line 4) {
@EUDFunc
def f_setAngle(unitEpd, angle):
    # (Line 5) dwwrite_epd(unitEpd + 0xFC/4, angle);
    f_dwwrite_epd(unitEpd + 0xFC // 4, angle)
    # (Line 6) }
    # (Line 8) function getAngle(unitEpd)

# (Line 9) {
@EUDFunc
def f_getAngle(unitEpd):
    # (Line 10) return dwread_epd(unitEpd + 0xFC/4);
    EUDReturn(f_dwread_epd(unitEpd + 0xFC // 4))
    # (Line 11) }
    # (Line 13) function showLaunchAngle(unitEpd)

# (Line 14) {// 해당 턴의, 멈춰있는 플레이어 유닛의 에임(발사각도) 를 보여줌
@EUDFunc
def f_showLaunchAngle(unitEpd):
    # (Line 15) const targetPlayer = utilEud.getPlayerID(unitEpd);
    targetPlayer = utilEud.f_getPlayerID(unitEpd)
    # (Line 16) const dotUnit = 47;
    dotUnit = 47
    # (Line 17) const locID = $L('loc_aim');
    locID = GetLocationIndex('loc_aim')
    # (Line 18) const angle = getAngle(unitEpd);
    angle = f_getAngle(unitEpd)
    # (Line 19) const unitX, unitY = utilEud.getUnitXY(unitEpd);
    unitX, unitY = List2Assignable([utilEud.f_getUnitXY(unitEpd)])
    # (Line 21) RemoveUnit(dotUnit, targetPlayer);
    DoActions(RemoveUnit(dotUnit, targetPlayer))
    # (Line 23) if(Command(targetPlayer, Exactly, 0, dotUnit))
    if EUDIf()(Command(targetPlayer, Exactly, 0, dotUnit)):
        # (Line 24) {//멈춰있을때 한번만 실행
        # (Line 25) for(var i=1; i<7; i++)
        i = EUDVariable()
        i << (1)
        if EUDWhile()(i >= 7, neg=True):
            def _t3():
                i.__iadd__(1)
            # (Line 26) {
            # (Line 27) const distanceX, distanceY = lengthdir(i*32*32, angle);//단위: 반칸 16x16
            distanceX, distanceY = List2Assignable([f_lengthdir(i * 32 * 32, angle)])
            # (Line 28) utilEud.moveLocationXY(locID, unitX + distanceX, unitY + distanceY);
            utilEud.f_moveLocationXY(locID, unitX + distanceX, unitY + distanceY)
            # (Line 29) CreateUnit(1, dotUnit, locID+1, targetPlayer);
            DoActions(CreateUnit(1, dotUnit, locID + 1, targetPlayer))
            # (Line 30) }
            # (Line 31) }
            EUDSetContinuePoint()
            _t3()
        EUDEndWhile()
        # (Line 32) }
    EUDEndIf()

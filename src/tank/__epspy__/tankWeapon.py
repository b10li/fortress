## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) var weaponSaver = 0;
weaponSaver = EUDCreateVariables(1)
_IGVA([weaponSaver], lambda: [0])
# (Line 2) const ap = 30;
ap = _CGFW(lambda: [30], 1)[0]
# (Line 3) const weaponList = [
# (Line 5) 60,     156,    20, ap+ 37,      3,
# (Line 6) 70,     152,   	 7,     50,      4,
# (Line 8) 71,     152,    30,     30,      4,
# (Line 9) 69,     150,    20,     35,      4,
# (Line 11) 94,     142,    30,     34,      4,
# (Line 12) 95,     142,    30,	ap+	25,      3,
# (Line 14) 72,     172,    30, ap+ 36,      3,
# (Line 15) 80,     142,    10,     60,      4,
# (Line 17) 43,     205,    40, ap+ 15,      3,
# (Line 18) 44,     172,     5,     60,      4,
# (Line 20) 12,     142,    25,     30,      4,
# (Line 21) 8,      150,    27, ap+ 35,      3,
# (Line 23) 9,      143,    20, ap+ 20,      3,
# (Line 24) 28,     143,    10,     65,      4,
# (Line 26) 11,     150,   	64, ap+ 10,      3,
# (Line 27) 21,     143,    20,     10,      4,
# (Line 29) 45,     142,   	50, ap+ 25,      3,
# (Line 30) 47,     142,   	 5,      7,      4,
# (Line 32) 42,     205,   	64,     21,      4,
# (Line 33) 57,     172,     1, ap+  1,      4
# (Line 34) ];
weaponList = _CGFW(lambda: [_ARR(FlattenList([60, 156, 20, ap + 37, 3, 70, 152, 7, 50, 4, 71, 152, 30, 30, 4, 69, 150, 20, 35, 4, 94, 142, 30, 34, 4, 95, 142, 30, ap + 25, 3, 72, 172, 30, ap + 36, 3, 80, 142, 10, 60, 4, 43, 205, 40, ap + 15, 3, 44, 172, 5, 60, 4, 12, 142, 25, 30, 4, 8, 150, 27, ap + 35, 3, 9, 143, 20, ap + 20, 3, 28, 143, 10, 65, 4, 11, 150, 64, ap + 10, 3, 21, 143, 20, 10, 4, 45, 142, 50, ap + 25, 3, 47, 142, 5, 7, 4, 42, 205, 64, 21, 4, 57, 172, 1, ap + 1, 4]))], 1)[0]
# (Line 35) function setWeapon(unitType)
# (Line 36) {
@EUDFunc
def f_setWeapon(unitType):
    # (Line 37) for(var i=0; i<20; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 20, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 38) {
        # (Line 39) const index = i*5;
        index = i * 5
        # (Line 40) if(weaponList[index] == unitType)
        if EUDIf()(weaponList[index] == unitType):
            # (Line 41) {
            # (Line 43) if(weaponSaver != weaponList[index])
            if EUDIf()(weaponSaver == weaponList[index], neg=True):
                # (Line 44) {
                # (Line 45) weaponSaver = weaponList[index];
                weaponSaver << (weaponList[index])
                # (Line 47) dwwrite(0x6564E0 + 1992 + 54 * 4, weaponList[index +1]);
                f_dwwrite(0x6564E0 + 1992 + 54 * 4, weaponList[index + 1])
                # (Line 49) wwrite(0x6564E0 + 4768 + 54 * 2, weaponList[index +2]);
                f_wwrite(0x6564E0 + 4768 + 54 * 2, weaponList[index + 2])
                # (Line 50) wwrite(0x6564E0 + 3048 + 54 * 2, weaponList[index +2]+10);
                f_wwrite(0x6564E0 + 3048 + 54 * 2, weaponList[index + 2] + 10)
                # (Line 51) wwrite(0x6564E0 + 936 + 54 * 2, weaponList[index +2]+20);
                f_wwrite(0x6564E0 + 936 + 54 * 2, weaponList[index + 2] + 20)
                # (Line 53) wwrite(0x6564E0 + 2512 + 54 * 2, weaponList[index+3]);
                f_wwrite(0x6564E0 + 2512 + 54 * 2, weaponList[index + 3])
                # (Line 55) bwrite(0x6564E0 + 3448 + 54 * 1, weaponList[index+4]);
                f_bwrite(0x6564E0 + 3448 + 54 * 1, weaponList[index + 4])
                # (Line 56) }
                # (Line 57) return;
            EUDEndIf()
            EUDReturn()
            # (Line 58) }
            # (Line 59) }
        EUDEndIf()
        # (Line 60) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) function moveLocationXY(locID, x, y) {
@EUDFunc
def f_moveLocationXY(locID, x, y):
    # (Line 2) dwwrite_epd(EPD(0x58DC60) + 5 * locID, x);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID, x)
    # (Line 3) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 1, y)
    # (Line 4) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 2, x)
    # (Line 5) dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y);
    f_dwwrite_epd(EPD(0x58DC60) + 5 * locID + 3, y)
    # (Line 6) }
    # (Line 8) function setpcolor(pnum, color) {

@EUDFunc
def f_setpcolor(pnum, color):
    # (Line 9) const pcolor_dst = 0x581D76 + 8 * pnum;
    pcolor_dst = 0x581D76 + 8 * pnum
    # (Line 10) const mcolor_dst = 0x581DD6 + pnum;
    mcolor_dst = 0x581DD6 + pnum
    # (Line 11) bwrite(pcolor_dst, color);
    f_bwrite(pcolor_dst, color)
    # (Line 12) bwrite(mcolor_dst, color);
    f_bwrite(mcolor_dst, color)
    # (Line 13) }
    # (Line 15) function getUnitXY(unitEpd)

# (Line 16) {
@EUDFunc
def f_getUnitXY(unitEpd):
    # (Line 17) return dwbreak(dwread_epd(unitEpd + 0x28/4))[[0,1]];
    EUDReturn(_SRET(f_dwbreak(f_dwread_epd(unitEpd + 0x28 // 4)), [0, 1]))
    # (Line 18) }
    # (Line 20) function getOrderID(unitEpd)

# (Line 21) {
@EUDFunc
def f_getOrderID(unitEpd):
    # (Line 22) return dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[3]];
    EUDReturn(f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[3])
    # (Line 23) }
    # (Line 25) function getPlayerID(unitEpd)

# (Line 26) {
@EUDFunc
def f_getPlayerID(unitEpd):
    # (Line 27) return dwbreak(dwread_epd(unitEpd + 0x4C / 4))[[2]];
    EUDReturn(f_dwbreak(f_dwread_epd(unitEpd + 0x4C // 4))[2])
    # (Line 28) }
    # (Line 30) function setOrderID(unitEpd, orderID)

# (Line 31) {
@EUDFunc
def f_setOrderID(unitEpd, orderID):
    # (Line 32) const player = getPlayerID(unitEpd);
    player = f_getPlayerID(unitEpd)
    # (Line 33) SetMemoryEPD(unitEpd + 0x4C / 4, SetTo, player + orderID * 256);
    DoActions(SetMemoryEPD(unitEpd + 0x4C // 4, SetTo, player + orderID * 256))
    # (Line 34) }
    # (Line 36) function getDeath(targetPlayer, targetUnit)

# (Line 37) {
@EUDFunc
def f_getDeath(targetPlayer, targetUnit):
    # (Line 38) for(var i=0; i<128; i++)
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 128, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 39) if(Deaths(targetPlayer, Exactly, i, targetUnit))
        if EUDIf()(Deaths(targetPlayer, Exactly, i, targetUnit)):
            # (Line 40) return i;
            EUDReturn(i)
            # (Line 41) }
        EUDEndIf()
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 43) function getUnitType(unitEpd)

# (Line 44) {
@EUDFunc
def f_getUnitType(unitEpd):
    # (Line 45) return dwread_epd(unitEpd + 0x64/4);
    EUDReturn(f_dwread_epd(unitEpd + 0x64 // 4))
    # (Line 46) }
    # (Line 48) function getUnitEnergy(unitEpd)

# (Line 49) {
@EUDFunc
def f_getUnitEnergy(unitEpd):
    # (Line 50) return dwbreak(dwread_epd(unitEpd + 0xA0 / 4))[[5]];
    EUDReturn(f_dwbreak(f_dwread_epd(unitEpd + 0xA0 // 4))[5])
    # (Line 51) }
    # (Line 53) function getBuildQueue1(unitEpd)

# (Line 54) {
@EUDFunc
def f_getBuildQueue1(unitEpd):
    # (Line 55) const BuildQueueList = dwread_epd(unitEpd + 0x98 /4); //대기열
    BuildQueueList = f_dwread_epd(unitEpd + 0x98 // 4)
    # (Line 56) const BuildQueue1 = dwbreak(BuildQueueList)[[0]]; //1번대기열
    BuildQueue1 = f_dwbreak(BuildQueueList)[0]
    # (Line 58) return BuildQueue1;
    EUDReturn(BuildQueue1)
    # (Line 59) }
    # (Line 61) function setBuildQueue1(unitEpd, value)

# (Line 62) {
@EUDFunc
def f_setBuildQueue1(unitEpd, value):
    # (Line 63) wwrite_epd(unitEpd + 0x098 / 4,  0x098 % 4, value);
    f_wwrite_epd(unitEpd + 0x098 // 4, 0x098 % 4, value)
    # (Line 64) }
    # (Line 66) function getKillCount(unitEpd)

# (Line 67) {
@EUDFunc
def f_getKillCount(unitEpd):
    # (Line 68) return bread_epd(unitEpd + 0x08F / 4,  0x08F % 4);
    EUDReturn(f_bread_epd(unitEpd + 0x08F // 4, 0x08F % 4))
    # (Line 69) }
    # (Line 71) function setKillCount(unitEpd, value)

# (Line 72) {
@EUDFunc
def f_setKillCount(unitEpd, value):
    # (Line 73) bwrite_epd(unitEpd + 0x08F / 4,  0x08F % 4, value);
    f_bwrite_epd(unitEpd + 0x08F // 4, 0x08F % 4, value)
    # (Line 74) }
    # (Line 76) function setRemainingBuildtime(unitEpd, value)

# (Line 77) {
@EUDFunc
def f_setRemainingBuildtime(unitEpd, value):
    # (Line 78) wwrite_epd(unitEpd + 0x0AC / 4,  0x0AC % 4, value);
    f_wwrite_epd(unitEpd + 0x0AC // 4, 0x0AC % 4, value)
    # (Line 79) }
    # (Line 81) function getRemainingBuildtime(unitEpd)

# (Line 82) {
@EUDFunc
def f_getRemainingBuildtime(unitEpd):
    # (Line 83) return wread_epd(unitEpd + 0x0AC / 4,  0x0AC % 4);
    EUDReturn(f_wread_epd(unitEpd + 0x0AC // 4, 0x0AC % 4))
    # (Line 84) }
    # (Line 86) function CenterViewAll(locID)

# (Line 87) {
@EUDFunc
def CenterViewAll(locID):
    # (Line 88) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 89) CenterView(locID+1);
    DoActions(CenterView(locID + 1))
    # (Line 90) EUDEndPlayerLoop();
    EUDEndPlayerLoop()
    # (Line 91) }
    # (Line 93) function isAtLocation(unitEpd, locID)

# (Line 94) {
@EUDFunc
def f_isAtLocation(unitEpd, locID):
    # (Line 95) const x, y = getUnitXY(unitEpd);
    x, y = List2Assignable([f_getUnitXY(unitEpd)])
    # (Line 96) const l = dwread_epd(EPD(0x58DC60) + 5 * locID);
    l = f_dwread_epd(EPD(0x58DC60) + 5 * locID)
    # (Line 97) const t = dwread_epd(EPD(0x58DC60) + 5 * locID + 1);
    t = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 1)
    # (Line 98) const r = dwread_epd(EPD(0x58DC60) + 5 * locID + 2);
    r = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 2)
    # (Line 99) const d = dwread_epd(EPD(0x58DC60) + 5 * locID + 3);
    d = f_dwread_epd(EPD(0x58DC60) + 5 * locID + 3)
    # (Line 101) if(x > l && y > t && x < r && y < d) return 1;
    if EUDIf()(EUDSCAnd()(x <= l, neg=True)(y <= t, neg=True)(x >= r, neg=True)(y >= d, neg=True)()):
        EUDReturn(1)
        # (Line 102) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 103) }
    EUDEndIf()

import header;
import util.utilEud;
import util.utilMath;
import tank.tankAim;
import tank.tankWeapon;
import physics;
import sound.emplayer;

const TOPSPEED = 46;
const BOTSPEED = 2;
// physics -----------------------------------------------------
const gravity = 1;
const pTargetArray = EUDArray(10);
var epdnum = 0;
var framebool = 0;    
//epd가 저장된 배열을 돌며 0 이 아닌걸 물리적용함
function push(unitEpd)
{
    pTargetArray[epdnum] = unitEpd;
    epdnum = epdnum + 1;
}
function popmid(unitEpd)
{
    for(var i=0; i<10; i++)
    {
        if(pTargetArray[i] == unitEpd)
        {
            pTargetArray[i] = 0;
            epdnum = epdnum - 1;
        }
    }
}
function boom(unitType, locID);
function speedLimit(v);
function renderBullet(wind)
{//bullet physics
    for(var i=0; i<10; i++)
    {
        if(pTargetArray[i])
        {
            const locID = $L('locBullet');
            const unitEpd = pTargetArray[i];
            const unitType = utilEud.getUnitType(unitEpd);

            physics.renderUnit(unitEpd, 1);
            MoveLocation(locID+1, unitType, $P7, $L('locDst')+1);
            if(pTargetArray[0]) utilEud.CenterViewAll(locID);
//탱크와의 거리x, 현재 위치 playarea 와의 비교
            
            if(Bring($P8, AtLeast, 1, '(buildings)', locID+1)
                || Bring($Force1, AtLeast, 1, '(men)', locID+1)
                /*|| Bring($Force3, AtLeast, 1, '(men)', locID+1)*/)
            {//collision
                popmid(unitEpd);
                if(unitType == header.List[2*3+1]
                    || unitType == header.List[2*3+2]
                    || unitType == header.List[9*3+1]) 
                {
                    KillUnit(unitType, $P7);
                }
                else RemoveUnitAt(1, '(men)', locID+1, $P7);
                //mine or not
                if(unitType == header.List[7*3+2]) 
                    CreateUnitWithProperties(1, 13, locID+1, $P8, UnitProperty(invincible = true));
                else if(unitType == header.List[9*3+2])
                {//overlord
                    const gasEpd = epdread_epd(EPD(0x628438));
                    CreateUnitWithProperties(1, 84, locID+1, $P8, UnitProperty(invincible = true));
                    bwrite_epd(gasEpd + 0x118 / 4,  0x118 % 4, 1000);
                    wwrite_epd(gasEpd + 0x110 / 4,  0x110 % 4, 1010);
                }
                else boom(unitType, locID);
            }
            else if(!utilEud.isAtLocation(unitEpd, $L('PlayArea')))
            {// out of playarea
                popmid(unitEpd);
                RemoveUnitAt(1, '(men)', locID+1, $P7);
            }
            else
            {
                var vx, vy = physics.getVxy(unitEpd);
                // speed limit
                vx = speedLimit(vx);
                vy = speedLimit(vy);

                var nw, ng;
                // slower accleration
                if(framebool % 2) ng = 0;
                else ng = 1;
                if(framebool == 0) nw = 2- wind/2;
                else nw = 0;
                physics.setVxy(unitEpd, vx + nw, vy + gravity);
            }
        }
    }
    framebool = (framebool+1)%6;
}
function speedLimit(v)
{
    var num = v;
    if(utilMath.abs(num) > (TOPSPEED + BOTSPEED)) 
    {
        if(num >= 0x80000000) num = -(TOPSPEED + BOTSPEED);
        else num = (TOPSPEED + BOTSPEED);
    }
    return num;
}

// shoot & create ----------------------------------------------------

function getBullet(unitType, num);
function toggleBullet(unitEpd)
{
    const unitType = utilEud.getUnitType(unitEpd);
    const player = utilEud.getPlayerID(unitEpd);
    // Q++
    const nextQ = (utilEud.getDeath(player, header.bulletQ)+1)%2;
    SetDeaths(player, SetTo, nextQ, header.bulletQ);
    const bullet = getBullet(unitType, nextQ);
    // change ui
    utilEud.setBuildQueue1(unitEpd, bullet);
}

function makeBullet(unitType, x, y, angle, speed)
{
    const locID = $L('locBullet');
    utilEud.moveLocationXY(locID, x, y);
    const unitEpd = epdread_epd(EPD(0x628438));
    CreateUnitWithProperties(1, unitType, locID+1, $P7, UnitProperty(invincible=true));
    // speed : 100(max) = x : 32(maxspeed)
    // and +minimum
    const changedSpeed = TOPSPEED * speed/100 + BOTSPEED;
    const vx, vy = lengthdir(changedSpeed, angle);
    physics.setVxy(unitEpd, vx, vy);
    push(unitEpd);
}

function shoot(unitEpd)
{
    const x, y = utilEud.getUnitXY(unitEpd);
    // shoot from distances
    const speed = utilEud.getKillCount(unitEpd); //killcount
    const angle = tankAim.getAngle(unitEpd);
    
    const targetPlayer = utilEud.getPlayerID(unitEpd);
    const unitType = utilEud.getUnitType(unitEpd);
    const bullet = getBullet(unitType, utilEud.getDeath(targetPlayer, header.bulletQ));

    emplayer.shootEffectMusic(bullet);
    // 총알 종류에 따른 다양한 생성
    var dx, dy = lengthdir(32, angle);
    makeBullet(bullet, x+dx, y+dy, angle, speed);
    if(bullet == header.List[8*3+2]) // tankLu 2
    {
    	for (var i=1; i<4; i++) 
    	{
    		dx, dy = lengthdir(32 + i*8, angle);
    		makeBullet(bullet, x+dx, y+dy, angle, speed);
    	}
	}
}
function boom(unitType, locID)
{
    const bombUnit = 50;
    //change Weapon
    const effectUnit = tankWeapon.setWeapon(unitType);
    //dwwrite(0x6564E0 + 1992 + 54 * 4, 150);
    const unitEpd = epdread_epd(EPD(0x628438));
    //create
    CreateUnitWithProperties(1, bombUnit, locID+1, $P7, UnitProperty(invincible=true));
    const unitPos = dwread_epd(unitEpd + 0x28/4); 
    //suicide attack
    dwwrite_epd(unitEpd + 0x58/4, unitPos);
    utilEud.setOrderID(unitEpd, 135);
    if(effectUnit != -1)
    {
        const effectEpd = epdread_epd(EPD(0x628438));
        CreateUnitWithProperties(1, effectUnit, locID+1, $P7, UnitProperty(invincible=true));
        dwwrite_epd(effectEpd + 0x58/4, unitPos);
        utilEud.setOrderID(effectEpd, 135);
    }
}
// 무기
function getBullet(unitType, num)
{
    for (var i = 0; i<header.ListNum; i++)
    {
        const index = i*3;
        if(header.List[index] == unitType)
            if(num) return header.List[index+1];
            else return header.List[index+2];
    }
}
## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __idiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov / v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __idiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov / v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import util.utilEud;
from util import utilEud
# (Line 2) const dotUnit = 217;
dotUnit = _CGFW(lambda: [217], 1)[0]
# (Line 4) function setAngle(unitEpd, angle)
# (Line 5) {
@EUDFunc
def f_setAngle(unitEpd, angle):
    # (Line 6) const player = utilEud.getPlayerID(unitEpd);
    player = utilEud.f_getPlayerID(unitEpd)
    # (Line 7) SetResources(player, SetTo, (360 + angle)%360, Ore);
    DoActions(SetResources(player, SetTo, (360 + angle) % 360, Ore))
    # (Line 8) }
    # (Line 10) function getAngle(unitEpd)

# (Line 11) {
@EUDFunc
def f_getAngle(unitEpd):
    # (Line 12) const player = utilEud.getPlayerID(unitEpd);
    player = utilEud.f_getPlayerID(unitEpd)
    # (Line 13) return dwread_epd(EPD(0x57F0F0)+ player);
    EUDReturn(f_dwread_epd(EPD(0x57F0F0) + player))
    # (Line 14) }
    # (Line 16) function showLaunchAngle(unitEpd)

# (Line 17) {// 해당 턴의, 멈춰있는 플레이어 유닛의 에임(발사각도) 를 보여줌
@EUDFunc
def f_showLaunchAngle(unitEpd):
    # (Line 18) const targetPlayer = utilEud.getPlayerID(unitEpd);
    targetPlayer = utilEud.f_getPlayerID(unitEpd)
    # (Line 20) const locID = $L('loc_aim');
    locID = GetLocationIndex('loc_aim')
    # (Line 21) const angle = getAngle(unitEpd);
    angle = f_getAngle(unitEpd)
    # (Line 22) const unitX, unitY = utilEud.getUnitXY(unitEpd);
    unitX, unitY = List2Assignable([utilEud.f_getUnitXY(unitEpd)])
    # (Line 24) RemoveUnit(dotUnit, targetPlayer);
    DoActions(RemoveUnit(dotUnit, targetPlayer))
    # (Line 25) for(var i=1; i<14; i++)
    i = EUDVariable()
    i << (1)
    if EUDWhile()(i >= 14, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 26) {
        # (Line 27) const distanceX, distanceY = lengthdir(i*(16), angle);//단위: 반칸 16x16
        distanceX, distanceY = List2Assignable([f_lengthdir(i * (16), angle)])
        # (Line 28) utilEud.moveLocationXY(locID, unitX + distanceX, unitY + distanceY);
        utilEud.f_moveLocationXY(locID, unitX + distanceX, unitY + distanceY)
        # (Line 29) CreateUnit(1, dotUnit, locID+1, targetPlayer);
        DoActions(CreateUnit(1, dotUnit, locID + 1, targetPlayer))
        # (Line 30) }
        # (Line 31) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 33) function clearAngle(targetPlayer)

# (Line 34) {
@EUDFunc
def f_clearAngle(targetPlayer):
    # (Line 35) RemoveUnit(dotUnit, targetPlayer);
    DoActions(RemoveUnit(dotUnit, targetPlayer))
    # (Line 36) }
